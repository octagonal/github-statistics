---
- 'GH-327: NegativeBinomialDistribution Cum Dist func not returning expected value'
- Rewrite this to not suck
- |-
  Remove the finalizer from SQLiteConnection

  For this finalizer to work correctly (i.e. not blow up), it would have to be able
  to guarantee that the finalizer for all of the prepared statements associated with
  this connection be run *first*, which it definitely can't do. So, we should demand
  explicit disposal instead.
- "Streams update 2.4.6 & 2.4.7 (#2319)\n\n* only accept -1 for infinite retries in
  recoverWithRetries\r\n\r\n* groupBy should be a Graph stage\r\n\r\n* Converts DelimiterFramingStage
  from PushPullStage to GraphStage\r\n\r\n* fix GroupBy\r\n\r\n* Fixing wrong initial
  buffer sizes in delay, and one logic bug\r\n\r\n* Return failed IOResult for non-existint
  file\r\n\r\n* fix memory leaks in tests\r\n\r\n* Fix onSubscribe-request-onNext
  reentrancy in VirtualProcessor\r\n\r\n* Remove obsolete RestartTestStage\r\n\r\n*
  Increase LayoutSpec stresstest patience\r\n\r\n* Remove obsolete OneToManyTestStage\r\n\r\n*
  Fix racy RecoverWithSpec\r\n\r\n* check that the server has started before trying
  to connect\r\n\r\n* Fix compose method of EmptyModule to be able to Keep.left or
  right\r\n\r\n* Adding docs for KillSwitch\r\n\r\n* replace all Thread.Interrupt
  calls\r\n\r\n* fix OutputStreamSourceStage\r\n\r\n* fix Throttle spec"
- |-
  Merge pull request #2089 from alarsoft/2080-fix-racy-flow-interleave-spec

  Fix racy spec for flow interleave
- |-
  Fix racy spec for flow interleave

  Closes #2080
- rename licence [skip ci] ...from Bash on Windows ;) xxx
- Fix stupid bug with condition for optional MedianColumn
- closed the ugly code in separate class
- preallocate results list in more safe, but still ugly way
- |-
  Fix #646 - Ugly hack to get around bug in EF6

  EF6 has a bug which is described here -
  http://stackoverflow.com/questions/19966106/spatial-datareader-and-wrapping-providers-in-ef6.
  This was picked up and fixed in EF 6.1 here -
  https://entityframework.codeplex.com/workitem/1867. Because we don't
  release a new version of Glimpse.EF for point releases of EF, we have to
  go with this hack until we hit EF7. So we don't forget the code that is
  needed is already in place.
- |-
  Squashed commit of the following:

  commit f9423deaa97b13f0766a8b06de5c67842114cfd1
  Author: hangy <hangy@hangy.de>
  Date:   Thu Dec 1 20:48:01 2016 +0100

      Update TimeSpanHumanizeTests.cs

  commit 2e5dfe5ae7546a242009b7c8aee730dc8ae17541
  Author: hangy <hangy@hangy.de>
  Date:   Thu Dec 1 20:37:50 2016 +0100

      Apparently I'm stupid and 7 days actually get humanized as 1 week.

  commit 152a119418776e75b1b3d23b1bdcc6b556dc3def
  Author: hangy <hangy@hangy.de>
  Date:   Wed Nov 30 23:50:51 2016 +0100

      Workaround for unneeded suffix: Just use the same value.

      The reason for this workaround is that at the method that decides if the suffix should be applied, the information about the time unit is not available. So it would either need to do some string magic and explicitly exclude the "TimeSpanHumanize_MultipleDays" resource key from adding the postfix, or most of the `TimeSpan` formatting code would need to be rewriten for Croatian or modified for all languages to support Croatian. Neither seems reasonable for a quick change.

  commit 002cc7b558dcaa133e58b7c5e7b6656d70be8e82
  Author: hangy <hangy@hangy.de>
  Date:   Wed Nov 30 23:12:57 2016 +0100

      Added some more tests. From what I've read, all days should resolve to "dana" for the Croatian language. (No "_DualTrialQuadral" postfix.")

  commit c190e9da4c9946ba5748c157c5e91a79ccba745b
  Author: hangy <hangy@hangy.de>
  Date:   Tue Nov 22 00:29:51 2016 +0100

      Add initial test for issue 597.
- Include semen and sperm as uncountables
- Include semen and sperm as uncountables
- Integration tests for toke clients
- Make sql server backplane changes suck less by using the nightly rather than release
  version
- the hell happened with NuGet yet again. CHECKPOINT - everything compiles
- Add super ugly GetVimLineNumber method that nearly completely duplicates the functionality
  of GetLineCore
- the merge from hell
- the merge from hell
- better explanation of wtf
- upon futher testing, and reflection, the methods on double/float are pretty damn
  fast
- "Removing decoding from SelfHost (#2462)\n\n* Removing decoding from SelfHost\r\n\r\n-
  Removing UrlDecode from relativeUrl resolution in Nancy Self Host\r\n- Removing
  trailing comma  that bugged the crap out of me\r\n\r\n* Removing temporary variables\r\n\r\n-
  Inlining relativeUrl temporary variable"
- |-
  Complete fix for #221

  I'm giving up on Elasticsearch giving a fuck about breaking versions.
  They don't. Breaks are intentionally not being constrained to major
  versions, see Elastic #21410 and #21417 for context.

  To support this reasonably, Opserver not just doesn't support pre-v0.90
  correctly. If this becomes an issue we'll add it back quickly via a
  switch.
- |-
  Fix for half of #221

  This fixes the "hostname" => "host" change in v5 only (while supporting
  old versions).

  Dear elastic, stop breaking shit randomly, please. XOXO, Nick
- 'Orion: make child status when healthy an option (default off - damn Dell drive
  warnings)'
- 'SQL: Make VLF query not suck'
- 'Redis: ehhhhh, screw <= 2.6, it''s very old now.'
- The hell was I smoking?
- Fixed UnitTest by reverting `Settings.settings` to use the old ugly format.
- |-
  Use Consolas as the command window font

  Put Consolas in font-family list before Lucida Console, since Lucida Console is an ugly font, and Consolas is beautiful.
- |-
  Merge branch 'master' of https://github.com/Redth/PushSharp

  # By Robb
  # Via Jon Dick (1) and Robb (1)
  * 'master' of https://github.com/Redth/PushSharp:
    Fixed leaking handles in PushServiceBase.DoChannelWork
- |-
  MomentaryLapsOfReason - fixing stupid code (I wrote)

  HTTP => WS scheme conversion is supposed to be done everywhere by UrlBuilder however the net45 WebSocketTransport was using both - UrlBuilder *and* manual conversion *in the same method*. Fixing the code to use the Uri converted by the UrlBuilder instead of doing the same conversion the second time.
- |-
  Handle closing windows a bit better

  Sends the window close packet if appropriate and also moves the mouse to
  the center of the screen so your view doesn't jerk around when you
  resume gameplay.
- |-
  Enable diagonal paths in A* implementation

  The way this works is like so, where 'o' is the voxel we're trying to
  leave, '_' is a possible exit, 'x' is an obstacle, and * is the exit.

      __*
      _o_
      ___

      xx*
      _o_
      ___

      xxx
      _o*
      ___

      xx_
      _ox
      __*

  Basically, if both the north and east paths are available, AND the
  northeast path is available, we use the northeast path.
- 'New: Validate PMS version before performing a library update'
- Fixed stupid error.
- |-
  Don't blow if driveFormat is null when looking up DriveType

  Closes #1444
- |-
  It's time for appveyor.yml

  Tooling changes need to live in the repo now so the build doesn't FUBAR
  every time we change the script.
- |-
  Skip MySQL tests if the server isn't running.

  This is the "approved" xUnit pattern, via:
  https://github.com/xunit/samples.xunit/tree/master/DynamicSkipExample
  It's also the only way I can make the damn skipping work...but at least
  it's it's one-time code to make any server set relatively easily
  skippable.
- Move to Microsoft.SqlServer.Compact, damn you rebase.
- The "SqlMapper.cs is too damned big" file split; also removes C#3 support and .NET
  3.5 support (sorry, but legacy by too many years)
- |-
  Merge pull request #96 from TheBerkin/v3

  Make RantConsole not crap
- Make RantConsole not crap
- Weeding out Memory Leaks... Stupid Xamarin...
- Update GitHubSharp and correct stupid URI escaping issue
- Got rid of stupid graphics service. Wired up Issue Create!
- |-
  Fixed stupid iOS table bug with estimation cells... so dumb.

  Added TTTAttributedLabel
- Fix stupid Syntax Highlightingi
- Screw it. Incorporate Xamarin.Utilities into the project. Sort out later...
- Stupid iOS and it's stupid controls...
- Stupid iOS and it's stupid controls...
- Removing a bunch of dependency shit :(
- Moving NuGet to try to fix this stupid build issue
- Fixes stupid typos in cifar-10 data parser
- |-
  THRIFT-3636 Double precision is not fully preserved in C++ TJSONProtocol
  Client: C++
  Patch: Wang Yaofu

  This closes #870
- stupid capitalization
- ShortName for servers in new ugly UUID world
- |-
  OSX: enable fat gmp again

  which was disabled by accident
  Closes GH-608
- |-
  Merge #9112: Avoid ugly exception in log on unknown inv type

  e9f25dd Avoid ugly exception in log on unknown inv type (Wladimir J. van der Laan)
- |-
  Merge #9112: Avoid ugly exception in log on unknown inv type

  e9f25dd Avoid ugly exception in log on unknown inv type (Wladimir J. van der Laan)
- |-
  Avoid ugly exception in log on unknown inv type

  It is unexpected behavior for `ToString` to raise an exception. It
  is expected to do a best-effort attempt at formatting but never fail.

  Catch the exception and simply print unknown inv types as hexadecimal.

  Fixes #9110.
- |-
  Tiled Fusion: Customized tab close buttons

  Avoiding the ugly drawn cross on Windows and making sure the close
  button icon looks good in both light and dark versions.
- |-
  rgw/rgw_rest_conn.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- |-
  rgw/rgw_lib.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- |-
  osd/OSD.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- |-
  msg/simple/Pipe.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- |-
  msg/async/dpdk/TCP-Stack.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- |-
  mon/Monitor.h: remove unused declaration

  Signed-off-by: Li Wang <li.wang@kylin-cloud.com>
- "Merge pull request #12390 from tchaikov/wip-start-after-setting-nonce\n\nmsg/async:
  set nonce before starting the workers\r\n\r\nReviewed-by: Haomai Wang <haomai@xsky.com>"
- "Merge pull request #12387 from tchaikov/wip-remove-unused-var\n\nmsg/async: remove
  unused member variable\r\n\r\nReviewed-by: Haomai Wang <haomai@xsky.com>"
- "fsx-mpi: fsx-mpi expects a file name not a dir\n\nThe test still fails even after
  being enabled:\n\n\t2016-12-07T18:00:44.337 INFO:teuthology.orchestra.run.mira105:Running:
  'mpiexec -f /home/ubuntu/cephtest/mpi-hosts -wdir /home/ubuntu/cephtest/gmnt sudo
  /home/ubuntu/cephtest/fsx-mpi -o 1MB -N 50000 -p 10000 -l 1048576 /home/ubuntu/cephtest/gmnt/test'\n\t2016-12-07T18:00:44.486
  INFO:teuthology.orchestra.run.mira105.stderr:Warning: Permanently added '172.21.8.122'
  (ECDSA) to the list of known hosts.\n\t2016-12-07T18:00:44.571 INFO:teuthology.orchestra.run.mira105.stdout:skipping
  zero size read\n\t2016-12-07T18:00:44.591 INFO:teuthology.orchestra.run.mira105.stdout:truncating
  to largest ever: 0x7cccb\n\t2016-12-07T18:00:44.606 INFO:teuthology.orchestra.run.mira083:Running:
  'sudo logrotate /etc/logrotate.d/ceph-test.conf'\n\t2016-12-07T18:00:44.611 INFO:teuthology.orchestra.run.mira100:Running:
  'sudo logrotate /etc/logrotate.d/ceph-test.conf'\n\t2016-12-07T18:00:44.614 INFO:teuthology.orchestra.run.mira105:Running:
  'sudo logrotate /etc/logrotate.d/ceph-test.conf'\n\t2016-12-07T18:00:44.887 INFO:teuthology.orchestra.run.mira105.stdout:skipping
  zero size read\n\t2016-12-07T18:00:44.954 INFO:teuthology.orchestra.run.mira105.stdout:Size
  error: expected 0xa6f7c stat 0xd4000 seek 0xd5000\n\t2016-12-07T18:00:44.954 INFO:teuthology.orchestra.run.mira105.stdout:LOG
  DUMP (2 total operations):\n\t2016-12-07T18:00:44.954 INFO:teuthology.orchestra.run.mira105.stdout:1(1
  mod 256): SKIPPED (no operation)\n\t2016-12-07T18:00:44.954 INFO:teuthology.orchestra.run.mira105.stdout:2(2
  mod 256): WRITE        0x1c748 thru 0xa6f7b    (0x8a834 bytes) HOLE\n\t2016-12-07T18:00:44.990
  INFO:teuthology.orchestra.run.mira105.stdout:Correct content saved for comparison\n\t2016-12-07T18:00:44.990
  INFO:teuthology.orchestra.run.mira105.stdout:(maybe hexdump \"/home/ubuntu/cephtest/gmnt/test\"
  vs \"/home/ubuntu/cephtest/gmnt/test.fsxgood\")\n\t2016-12-07T18:00:45.000 INFO:teuthology.orchestra.run.mira105.stdout:\n\t2016-12-07T18:00:45.000
  INFO:teuthology.orchestra.run.mira105.stdout:===================================================================================\n\t2016-12-07T18:00:45.000
  INFO:teuthology.orchestra.run.mira105.stdout:=   BAD TERMINATION OF ONE OF YOUR
  APPLICATION PROCESSES\n\t2016-12-07T18:00:45.000 INFO:teuthology.orchestra.run.mira105.stdout:=
  \  EXIT CODE: 120\n\t2016-12-07T18:00:45.000 INFO:teuthology.orchestra.run.mira105.stdout:=
  \  CLEANING UP REMAINING PROCESSES\n\t2016-12-07T18:00:45.000 INFO:teuthology.orchestra.run.mira105.stdout:=
  \  YOU CAN IGNORE THE BELOW CLEANUP MESSAGES\n\t2016-12-07T18:00:45.000 INFO:teuthology.orchestra.run.mira105.stdout:===================================================================================\n\t2016-12-07T18:00:45.000
  INFO:teuthology.orchestra.run.mira105.stderr:[proxy:0:0@mira105] HYD_pmcd_pmip_control_cmd_cb
  (./pm/pmiserv/pmip_cb.c:886): assert (!closed) failed\n\t2016-12-07T18:00:45.000
  INFO:teuthology.orchestra.run.mira105.stderr:[proxy:0:0@mira105] HYDT_dmxu_poll_wait_for_event
  (./tools/demux/demux_poll.c:77): callback returned error status\n\t2016-12-07T18:00:45.001
  INFO:teuthology.orchestra.run.mira105.stderr:[proxy:0:0@mira105] main (./pm/pmiserv/pmip.c:206):
  demux engine error waiting for event\n\t2016-12-07T18:00:45.002 INFO:teuthology.orchestra.run.mira105.stderr:[mpiexec@mira105]
  HYDT_bscu_wait_for_completion (./tools/bootstrap/utils/bscu_wait.c:76): one of the
  processes terminated badly; aborting\n\t2016-12-07T18:00:45.002 INFO:teuthology.orchestra.run.mira105.stderr:[mpiexec@mira105]
  HYDT_bsci_wait_for_completion (./tools/bootstrap/src/bsci_wait.c:23): launcher returned
  error waiting for completion\n\t2016-12-07T18:00:45.002 INFO:teuthology.orchestra.run.mira105.stderr:[mpiexec@mira105]
  HYD_pmci_wait_for_completion (./pm/pmiserv/pmiserv_pmci.c:217): launcher returned
  error waiting for completion\n\t2016-12-07T18:00:45.002 INFO:teuthology.orchestra.run.mira105.stderr:[mpiexec@mira105]
  main (./ui/mpich/mpiexec.c:331): process manager error waiting for completion\n\nI
  am not sure what the cause is. I'm leaving the test disabled for now and merging
  this PR.\n\nSigned-off-by: Patrick Donnelly <pdonnell@redhat.com>"
- Corrections as per Wang Lu's suggestions
- working but ugly code
- Improve stroke handling in DrawingTracer by simulating line join.
- 'Proof mode: stroke and fill texts to improve visibility.'
- |-
  Update README.md - added windows binaries (#1600)

  Added a link to the nightly windows binaries hosted on Guido Tapia's (my) blog
- |-
  ES HLE / WAD boot: hardcode the entrypoint

  NAND titles are always started at address 0x3400 with translation off.
  The entrypoint in the DOL is ignored.
- |-
  VideoCommon/Render: Inplace frame dump encoding.

  This increase the performance of good backends a bit, but slows down the bads one a lot.
  Let's fix those backends instead of forcing stupid memcpy in the common code.
- |-
  add watchman::to<std::string> helper function

  Summary:
  This reuses the w_string::build() machinery to implement
  a function that is similar to `folly::to<std::string>`; the variadic
  arguments are appended to a container of the specified type.

  While we primarily use w_string for our filename paths, there are a number of
  error handling flows that currently use a pretty ugly
  `ignore_result(asprintf())` construction to pass a formatted error message back
  out to the caller.

  I'd like to eliminate this `asprintf` usage and replace it with exception
  throwing.  It feels simplest to move a string generated by this function into
  such an exception.

  With that done, we can also remove the asprintf port that we have floating
  around for windows.

  Reviewed By: farnz

  Differential Revision: D4209509

  fbshipit-source-id: f68805d94b614d51044dba23273419adb3e32baf
- |-
  query expression terms -> virtual classes

  Summary:
  Unfortunately a large diff because we can't really change these piecemeal.

  1. Introduce a `QueryExpr` virtual base class that has an `evaluate` method.
  2. Switch from a naked pointer to the prior query term to `unique_ptr<QueryExpr>`
  3. `const`ify the `watchman_file` parameter that is passed to the evaluator.

  I switched a couple of trivial things from `w_string_t*` to `w_string` as part
  of this so that these expression classes didn't need to have explicit
  destructors.

  Reviewed By: farnz

  Differential Revision: D4019984

  fbshipit-source-id: ac0a786ccda7a0984b19e027189bee858b212169
- |-
  Build iOS fat static library for Unity and Xamarin

  Summary:
  $ buck build //csharp:yoganet-ios
      $ buck targets --show-output //csharp:yoganet-ios
      //csharp:yoganet-ios buck-out/gen/csharp/yoganet-ios/libyoga.a

      $ lipo -info buck-out/gen/csharp/yoganet-ios/libyoga.a
      Architectures in the fat file: buck-out/gen/csharp/yoganet-ios/libyoga.a are: armv7 x86_64 arm64

      $ nm buck-out/gen/csharp/yoganet-ios/libyoga.a|grep -e 'T _YGNodeNew' -e 'ygNode' -e 'T _YGInteropSetLogger'
      0000000000000000 T _YGNodeNew
      0000000000001070 t -[UIView(Yoga) ygNode]
      0000000000000000 T _YGInteropSetLogger
  Closes https://github.com/facebook/yoga/pull/286

  Reviewed By: emilsjolander

  Differential Revision: D4338919

  Pulled By: splhack

  fbshipit-source-id: 7acfdfa0dc4d152d7bfe92161efdeb9f161f70e6
- |-
  Build iOS fat static library for Unity and Xamarin

  Summary:
  $ buck build //csharp:yoganet-ios
      $ buck targets --show-output //csharp:yoganet-ios
      //csharp:yoganet-ios buck-out/gen/csharp/yoganet-ios/libyoga.a

      $ lipo -info buck-out/gen/csharp/yoganet-ios/libyoga.a
      Architectures in the fat file: buck-out/gen/csharp/yoganet-ios/libyoga.a are: armv7 x86_64 arm64

      $ nm buck-out/gen/csharp/yoganet-ios/libyoga.a|grep -e 'T _YGNodeNew' -e 'ygNode' -e 'T _YGInteropSetLogger'
      0000000000000000 T _YGNodeNew
      0000000000001070 t -[UIView(Yoga) ygNode]
      0000000000000000 T _YGInteropSetLogger
  Closes https://github.com/facebook/yoga/pull/286

  Reviewed By: emilsjolander

  Differential Revision: D4338919

  Pulled By: splhack

  fbshipit-source-id: 7acfdfa0dc4d152d7bfe92161efdeb9f161f70e6
- |-
  Merge pull request #2274 from nmittler/gae

  Hacking ByteBufferWriter to work with GAE
- |-
  Hacking ByteBufferWriter to work with GAE

  Fixes #2269
- Replace Tribe and Nextel with Virgin Mobile and WOM, respectively (#1342)
- |-
  travis-ci: Install libgcrypt from Ubuntu 14.04.

  This is getting really ugly but we need libgcrypt >= 1.6.
- ass AXEvent_WindowTitleChanged
- Caving in to ignoring stupid pedantic Clang warnings for old-style-cast in header
  files
- |-
  Merge pull request #639 from sergof/conversion-warnings

  Ignore various anal GCC warnings.
- 'tests: Stupid fix for Qt4'
- |-
  Ugly workarounds :) for various small bugs in the Edit Cell

  Fixes #726, and also a few other small issues at the same time
- Remove commented out crap
- Paramount, bitch
- |-
  [ignition] Fix hole check for dynamic local variables

  The fast-path for dynamic local variables was previously checking the
  lookup variable rather than the shadowed variable when deciding whether
  to add a hole check.

  BUG=669540

  Review-Url: https://codereview.chromium.org/2551023004
  Cr-Commit-Position: refs/heads/master@{#41677}
- |-
  [ignition] Fix hole check for dynamic local variables

  The fast-path for dynamic local variables was previously checking the
  lookup variable rather than the shadowed variable when deciding whether
  to add a hole check.

  BUG=669540

  Review-Url: https://codereview.chromium.org/2551023004
  Cr-Commit-Position: refs/heads/master@{#41677}
- |-
  Support millisecond timeouts for reads, writes, and connects

  Summary:
  WebScaleSQL Feature: Millisecond Client Timeouts

  This diff exposes three new client options:

  MYSQL_OPT_CONNECT_TIMEOUT_MS
  MYSQL_OPT_READ_TIMEOUT_MS
  MYSQL_OPT_WRITE_TIMEOUT_MS

  Which are similar to the non-_MS options, except the value is, of
  course, in milliseconds.

  This diff also changes a number of timeout-related codepaths to use a
  structure rather than a naked integer.  This helps prevent many, many
  classes of errors that come from accidentally multiplying or dividing by
  1000 to convert (or forgetting to), and creates a form of type safety
  for timeouts.

  Test Plan: jenkins, mtr

  Reviewers: pivanof, inaam-rana, darnaut, weixiang.zhai

  Reviewed By: darnaut, inaam-rana, weixiang.zhai, pivanof

  CC: jtolmer, MarkCallaghan, flamingcow, jeremycole, andrew-ford, liang.guo.752, chip, atcurtis, jtolmer, CalvinSun, WebScaleSQL

  Differential Revision: https://reviews.facebook.net/D17019
  Differential Revision: https://reviews.facebook.net/D17667
  Differential Revision: https://reviews.facebook.net/D32811
  Differential Revision: https://reviews.facebook.net/D35571
- |-
  generate native PKG for OS X using "fpm"

  On OS X, packages are very limited and do not have the functionality that is
  provided by package managers on Linux/BSD systems -- installation is supported,
  but no uninstallation. Also, the compression support for packages is very poor
  -- a 92MiB package is generated instead of a 14MiB tarball compressed using xz.

  Thus, we use a very ugly hack to get the package down to a reasonable size. We
  actually create a compressed tarball using xz (as before) and include a after-
  install script which decompresses this tarball into /usr/local. To support the
  scenario where the end-user might not have xz installed on the machine, a copy
  of unxz is also bundled in the package.
- |-
  Problem: curve_keygen not build unless --enable-curve is passed

  Solution: test ENABLE_CURVE_KEYGEN and enable it only if
  zmq_enable_curve_keygen=yes nad enable_curve=yes. Additionally set
  enable_curve=yes for libsodium and tweetnacl, so it is enabled
  implicitly and fixes the problem.
- "Merge pull request #701 from magicbear/port-nginx-1.8.1\n\nMerge nginx 1.8.0 to
  1.8.1\r\nTested-by: Xiaochen Wang <wangxiaochen0@gmail.com>"
- |-
  Add Expires field for set-cookie

  Max-Age is only supported since HTTP/1.1

  Add the Expires filed to fix HTTP/1.0 and some fucking browsers such as IE6/7/8
- "updated for version 7.4.332\nProblem:    GTK: When a sign icon doesn't fit exactly
  there can be ugly gaps.\nSolution:   Scale the sign to fit when the aspect ratio
  is not too far off.\n\t    (Christian Brabandt)"
- "1. Add test case for invocation fix.\n2. Fix return value error when js function
  call a objective-c method which return float/double.\nCase like this, objective-c\n```objc\n@implementation
  Foo\n- (double)foo {\n\treturn 100.0\n}\n@end\n```\n\n```js\ndefineClass(\"Foo\",
  {\n\tbar: function(){\n\t\t// Wrong value here on iOS7\n\t\tconsole.log(self.foo);\n\t}\n}\n```\n\nThe
  js code and objective-c code call each other by NSInvocation. But there's [a fat
  bug in NSInvocation](http://stackoverflow.com/questions/19874502/nsinvocation-getreturnvalue-with-double-value-produces-0-unexpectedly)
  on iOS7 (This only occurred on iOS7). I'm trying to fix this with this commit."
- "Getting rid of that ugly switch statement\n\n\tmodified:   src/nms.c"
- "hyperv/storvsc: Fix the SCSI disk attachment issue.\n\nOn pre-WS2016 Hyper-V, if
  the only LUNs > 7 are used, then all disks\nfails to attach.  Mainly because those
  versions of Hyper-V do not set\nSRB_STATUS properly and deliver junky INQUERY responses.\n\nSubmitted
  by:\tHongjiang Zhang <honzhan microsoft com>\nReported by:\tHongxiong Xian <v-hoxian
  microsoft com>\nMFC after:\t1 week\nSponsored by:\tMicrosoft\nDifferential Revision:\thttps://reviews.freebsd.org/D8724"
- |-
  1. Library binaries are back in the repo.
  2. Image fat libs are copied in ./libs and their headers in ./include
- 'Removed beer button from README, fixes #94.'
- |-
  Merge branch 'as/merge-attr-sleep' into maint

  Fix for a racy false-positive test failure.

  * as/merge-attr-sleep:
    t6026: clarify the point of "kill $(cat sleep.pid)"
    t6026: ensure that long-running script really is
    Revert "t6026-merge-attr: don't fail if sleep exits early"
    Revert "t6026-merge-attr: ensure that the merge driver was called"
    t6026-merge-attr: ensure that the merge driver was called
    t6026-merge-attr: don't fail if sleep exits early
- |-
  Merge branch 'as/merge-attr-sleep'

  Fix for a racy false-positive test failure.

  * as/merge-attr-sleep:
    t6026: clarify the point of "kill $(cat sleep.pid)"
    t6026: ensure that long-running script really is
    Revert "t6026-merge-attr: don't fail if sleep exits early"
    Revert "t6026-merge-attr: ensure that the merge driver was called"
    t6026-merge-attr: ensure that the merge driver was called
    t6026-merge-attr: don't fail if sleep exits early
- |-
  Ignore PRIORITY frames that reference closed pushed streams

  Firefox sends a PRIORITY frame when receiving a PUSH_PROMISE frame.
  Because of the racy nature of the protocol, it's very possible that the
  PRIORITY frame is received once the stream is closed on H2O side.

  This results in us opening a new stream that will be used to account
  against `globalconf->http2.max_streams_for_priority`. Eventually, this
  can lead to sending a GOAWAY frame with 'ENHANCE_YOUR_CALM'.

  This commit causes H2O to ignore PRIORITY frames that reference:
  - pushed streams that are closed or idle
  - pulled streams that are closed

  I've tested the fix by using the following handler (and a dummy js file)
  and verified that we hit the GOAWAY path without the fix, and not anymore
  with the fix:

  ```
          mruby.handler: |
            Proc.new do |env|
              case env["PATH_INFO"]
              when "/"
                push_paths = []
                (1..100).each { |i| push_paths << "/index.js?#{i}" }
                [399, push_paths.empty? ? {} : {"link" =>
  ush_paths.map{|p| "<#{p}>; rel=preload"}.join(",")}, []]
              else
                [399, {}, []]
              end
            end
  ```
- |-
  Fix #311... again.

  stupid bug in tvOS 9.2

  the controller paused handler (if implemented) seems to cause a 'back' navigation action as well as calling the pause handler itself. Which breaks the menu functionality.

  But of course, this isn't the case on iOS 9.3. YAY FRAGMENTATION. ¬_¬

  Conditionally handle the pause menu differently dependning on tvOS or iOS. FFS.
- Okay, screw autoconf. It tries to do too much.
- |-
  Mitigate performance penalty from v8 thread cruft

  v8 never reaps memory used by terminated threads, so if you blow past
  Fiber's coroutine pool then v8 starts to suffer. I submitted v8
  issue #3777, but this patch serves as a decent workaround.
- |-
  Refactor initialization logic

  This simplifies initialization into a clear 2-phase dichotomy. The first
  phase runs before malloc is ready, and the second phase is in regular
  initialization. This incidentally plugs a hole where thread-specific
  keys were getting lost early in initialization. I think there's still a
  condition where you could lose data, but OS X and Linux aren't hitting
  it so it's ok for now.
- |-
  Workaround v8 bugs with small stacks

  v8 seems to have some issues when you try and use stack sizes smaller
  than it's used to.

  First is that if you attempt to set a stack limit that's smaller than
  the snapshot size (if enabled) it will crash your shit in a very hard to
  understand way. Unfortunately there's no way to actually know what that
  magic size is in advance, so I'm just using a secret v8 internal
  variable. This means that for most systems each coroutine will consume
  ~320kb of memory.

  Second issue is there's a bug on 64 bit platforms when your Javascript
  overflows the stack. It's probably pretty hard to hit this bug in
  regular code but it's still quite bad. There's a workaround that I'm
  using to get past that.
- |-
  global: synchronize initialization and shutdown with pthreads

  When trying to initialize and tear down global data structures
  from different threads at once with `git_libgit2_init` and
  `git_libgit2_shutdown`, we race around initializing data. While
  we use `pthread_once` to assert that we only initilize data a
  single time, we actually reset the `pthread_once_t` on the last
  call to `git_libgit2_shutdown`. As resetting this variable is not
  synchronized with other threads trying to access it, this is
  actually racy when one thread tries to do a complete shutdown of
  libgit2 while another thread tries to initialize it.

  Fix the issue by creating a mutex which synchronizes `init_once`
  and the library shutdown.
- |-
  sysdir: use the standard `init` pattern

  Don't try to determine when sysdirs are uninitialized.  Instead, simply
  initialize them all at `git_libgit2_init` time and never try to
  reinitialize, except when consumers explicitly call `git_sysdir_set`.

  Looking at the buffer length is especially problematic, since there may
  no appropriate path for that value.  (For example, the Windows-specific
  programdata directory has no value on non-Windows machines.)

  Previously we would continually trying to re-lookup these values,
  which could get racy if two different threads are each calling
  `git_sysdir_get` and trying to lookup / clear the value simultaneously.
- fix a stupid error on alloc_reserved
- |-
  Avoid calling strndupa() within a loop

  Call within a helper function instead, which will help not blow up the
  stack (which is very unlikely in this case, but alas.)
- 'iter.c: fixed stupid each() bug'
- |-
  fix bitshifting transposition

  Fuck me this is embarrassing. I got it right once, then flipped them
  everywhere else. This is why you use defines for everything. :(
- |-
  stupid whitespace thing pulls in dead files

  I don't care why it happened, just don't whitespace check the README files
  anymore.
- wtf `make al`?
- |-
  ao_alsa: explicitly add default device manually

  The "default" entry (which is and always was mpv/mplayer's default) does
  not have a description set in the ALSA API. (While "sysdefault"
  strangely has.)

  Instead of an empty description, this should show something nice, so
  reuse the ao.c code for naming default devices (see previous commit).

  It's still a bit ugly that audio-device-list will have a default entry
  for "Autoselect device" and "Default (alsa)", but then again we probably
  want to allow the user to force ALSA (i.e. prevent fallbacks to other
  AOs) just because ALSA is so flaky and makes this a legitimate feature.
- |-
  mp_image: dump all mp_colorspace members in verbose logging

  Also extend the default buffer size for formatting this string, because
  it can get too damn long.
- 'vo_tct: introduce modern caca alternative'
- |-
  demux_lavf: don't accidentally enable edit list crap on Libav

  You really don't get a break from all the multiple bullshit.
- |-
  options: rename subtitle options

  Rename the text subtitle options from --sub-text- to --sub-
  and --ass- options to --sub-ass-.
  The intention is to common sub options to prefixed --sub-
  and special ASS option be seen as a special version of sub options.
  The OSD options that work like the --sub- options are still named
  --osd-.
  Man page updated including a short note about renamed --sub-text-*
  and --ass-* options to --sub-* and --sub-ass-*.
- |-
  vo_opengl: apply 90° rotation to chroma texture size

  When we rotate the inmage by 90° or 270°, chroma width and height need
  to be swapped.

  Fixes #3568.

  But is the chroma sub location correct? Who the hell knows...
- |-
  SSL: improved session ticket callback error handling.

  Prodded by Guido Vranken.
- "Finalize work on ws2812 module\n\n* Fix bug on first write\r\n\tPin is 'HIGH' at
  reset, so we need to pull it down and generate a\r\n\treset.\r\n\r\n* Move init
  code to flash section, not needed to be in iram.\r\n\r\n* Remove pin choice in API\r\n\r\n*
  Remove lock in ws2812_buffer_write\r\n\r\n* Remove naked malloc\r\n\r\n* Drop ws2812_writergb\r\n\r\n*
  Drop support of ws2812.buffers to ws2812_writegrb should use ws2812.buffers:write\r\n\r\n*
  Add support for <>3 colors per leds strips (RGBW)\r\n\r\n* Remove ICACHE_FLASH_ATTR\r\n\r\n*
  Add static const on _uartData to avoid initialization penalty"
- 'bugfix: balancer_by_lua* did not respect "lua_code_cache off". thanks XI WANG for
  the report and Dejiang Zhu for the patch in #663.'
- 'doc: documented that ngx.req.get_body_data() is available in the context of log_by_lua*.
  thanks YuanSheng Wang for the patch in #660.'
- |-
  feature: added new API functions ngx.worker.count() and ngx.worker.id() for returning the total count of nginx worker processes and the ordinal number (0, 1, 2, and etc) of the current worker. thanks YuanSheng Wang for the patch in #531.

  also added pure C APIs for them.
- |-
  Remove extra bang

  A bang (!) slipped through in the recent UI cleanup

  Reviewed-by: Rich Salz <rsalz@openssl.org>
  (Merged from https://github.com/openssl/openssl/pull/2051)
- |-
  Remove extra bang

  A bang (!) slipped through in the recent UI cleanup

  Reviewed-by: Rich Salz <rsalz@openssl.org>
  (Merged from https://github.com/openssl/openssl/pull/2051)
- |-
  Start using the key_share data to derive the PMS

  The previous commits put in place the logic to exchange key_share data. We
  now need to do something with that information. In <= TLSv1.2 the equivalent
  of the key_share extension is the ServerKeyExchange and ClientKeyExchange
  messages. With key_share those two messages are no longer necessary.

  The commit removes the SKE and CKE messages from the TLSv1.3 state machine.
  TLSv1.3 is completely different to TLSv1.2 in the messages that it sends
  and the transitions that are allowed. Therefore, rather than extend the
  existing <=TLS1.2 state transition functions, we create a whole new set for
  TLSv1.3. Intially these are still based on the TLSv1.2 ones, but over time
  they will be amended.

  The new TLSv1.3 transitions remove SKE and CKE completely. There's also some
  cleanup for some stuff which is not relevant to TLSv1.3 and is easy to
  remove, e.g. the DTLS support (we're not doing DTLSv1.3 yet) and NPN.

  I also disable EXTMS for TLSv1.3. Using it was causing some added
  complexity, so rather than fix it I removed it, since eventually it will not
  be needed anyway.

  Reviewed-by: Rich Salz <rsalz@openssl.org>
- screwed with some defines
- |-
  Add a crude facility for dealing with relative pointers.

  C doesn't have any sort of built-in understanding of a pointer
  relative to some arbitrary base address, but dynamic shared memory
  segments can be mapped at different addresses in different processes,
  so any sort of shared data structure stored within a dynamic shared
  memory segment can't use absolute pointers.  We could use something
  like Size to represent a relative pointer, but then the compiler
  provides no type-checking.  Use stupid macro tricks to get some
  type-checking.

  Patch originally by me.  Concept suggested by Andres Freund.  Recently
  resubmitted as part of Thomas Munro's work on dynamic shared memory
  allocation.

  Discussion: 20131205144434.GG12398@alap2.anarazel.de
  Discussion: CAEepm=1z5WLuNoJ80PaCvz6EtG9dN0j-KuHcHtU6QEfcPP5-qA@mail.gmail.com
- |-
  Clean up pg_dump tests, re-enable BLOB testing

  Add a loop to check that each test covers all of the pg_dump runs.  We
  (I) had been a bit sloppy when adding new runs and not making sure to
  mark if they should be under like or unlike for each test, this loop
  makes sure that the test system will complain if any are forgotten in
  the future.

  The loop also correctly handles the 'catch all' cases, which are used to
  avoid running unnecessary specific checks when a single catch-all can be
  done (eg: a no-acl run should not have any GRANT commands).

  Also, re-enable the testing of blobs, but use lo_from_bytea() instead of
  trying to be cute and writing out to a file and then reading it back in
  with psql, which proved to be difficult for some buildfarm members.
  This allows us to add support for testing the --no-blobs option which
  will be getting added shortly, provided the buildfarm doesn't blow up on
  this.
- |-
  Provide NO_INSTALLCHECK option for pgxs.

  This allows us to avoid running the regression tests in contrib modules
  like pg_stat_statement in a less ugly manner.

  Discussion: <22432.1478968242@sss.pgh.pa.us>
- |-
  Fix bogus tree-flattening logic in QTNTernary().

  QTNTernary() contains logic to flatten, eg, '(a & b) & c' into 'a & b & c',
  which is all well and good, but it tries to do that to NOT nodes as well,
  so that '!!a' gets changed to '!a'.  Explicitly restrict the conversion to
  be done only on AND and OR nodes, and add a test case illustrating the bug.

  In passing, provide some comments for the sadly naked functions in
  tsquery_util.c, and simplify some baroque logic in QTNFree(), which
  I think may have been leaking some items it intended to free.

  Noted while investigating a complaint from Andreas Seltenreich.
  Back-patch to all supported versions.
- |-
  simplify the process of loading fat binaries

  We avoid parse everything more than once and just when needed
- "Dalvik analysis and bin parsing enhancements (#6320)\n\n* Initial work to enhance
  the dalvik analysis with rbin info\r\n* fix ptr addr in new-instance instruction
  in Dalvik Anal (#6082)\r\n* dalvik anal:fix ptr addr in new-instance\r\n* first
  ESIL instructions for Dalvik\r\n* more ESIL instructions for Dalvik\r\n* parse more
  data in dex format\r\n* code refactor and several fixes"
- Honor hints in disasm, anal and emulation
- clean anal hints when using xtr plugin
- realign entry and set anal hints in arm mach0
- Do not reload anal plugin if is the same
- "FIX #59999 (#6182)\n\nit was shitty typo, but it helped finding another bug where\r\nr_anal_type_get_size
  never took arrays in concideration, not it should\r\nwork well."
- |-
  netlink: Call cb->done from a worker thread

  [ Upstream commit 707693c8a498697aa8db240b93eb76ec62e30892 ]

  The cb->done interface expects to be called in process context.
  This was broken by the netlink RCU conversion.  This patch fixes
  it by adding a worker struct to make the cb->done call where
  necessary.

  Fixes: 21e4902aea80 ("netlink: Lockless lookup with RCU grace...")
  Reported-by: Subash Abhinov Kasiviswanathan <subashab@codeaurora.org>
  Signed-off-by: Herbert Xu <herbert@gondor.apana.org.au>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  net, sched: respect rcu grace period on cls destruction

  [ Upstream commit d936377414fadbafb4d17148d222fe45ca5442d4 ]

  Roi reported a crash in flower where tp->root was NULL in ->classify()
  callbacks. Reason is that in ->destroy() tp->root is set to NULL via
  RCU_INIT_POINTER(). It's problematic for some of the classifiers, because
  this doesn't respect RCU grace period for them, and as a result, still
  outstanding readers from tc_classify() will try to blindly dereference
  a NULL tp->root.

  The tp->root object is strictly private to the classifier implementation
  and holds internal data the core such as tc_ctl_tfilter() doesn't know
  about. Within some classifiers, such as cls_bpf, cls_basic, etc, tp->root
  is only checked for NULL in ->get() callback, but nowhere else. This is
  misleading and seemed to be copied from old classifier code that was not
  cleaned up properly. For example, d3fa76ee6b4a ("[NET_SCHED]: cls_basic:
  fix NULL pointer dereference") moved tp->root initialization into ->init()
  routine, where before it was part of ->change(), so ->get() had to deal
  with tp->root being NULL back then, so that was indeed a valid case, after
  d3fa76ee6b4a, not really anymore. We used to set tp->root to NULL long
  ago in ->destroy(), see 47a1a1d4be29 ("pkt_sched: remove unnecessary xchg()
  in packet classifiers"); but the NULLifying was reintroduced with the
  RCUification, but it's not correct for every classifier implementation.

  In the cases that are fixed here with one exception of cls_cgroup, tp->root
  object is allocated and initialized inside ->init() callback, which is always
  performed at a point in time after we allocate a new tp, which means tp and
  thus tp->root was not globally visible in the tp chain yet (see tc_ctl_tfilter()).
  Also, on destruction tp->root is strictly kfree_rcu()'ed in ->destroy()
  handler, same for the tp which is kfree_rcu()'ed right when we return
  from ->destroy() in tcf_destroy(). This means, the head object's lifetime
  for such classifiers is always tied to the tp lifetime. The RCU callback
  invocation for the two kfree_rcu() could be out of order, but that's fine
  since both are independent.

  Dropping the RCU_INIT_POINTER(tp->root, NULL) for these classifiers here
  means that 1) we don't need a useless NULL check in fast-path and, 2) that
  outstanding readers of that tp in tc_classify() can still execute under
  respect with RCU grace period as it is actually expected.

  Things that haven't been touched here: cls_fw and cls_route. They each
  handle tp->root being NULL in ->classify() path for historic reasons, so
  their ->destroy() implementation can stay as is. If someone actually
  cares, they could get cleaned up at some point to avoid the test in fast
  path. cls_u32 doesn't set tp->root to NULL. For cls_rsvp, I just added a
  !head should anyone actually be using/testing it, so it at least aligns with
  cls_fw and cls_route. For cls_flower we additionally need to defer rhashtable
  destruction (to a sleepable context) after RCU grace period as concurrent
  readers might still access it. (Note that in this case we need to hold module
  reference to keep work callback address intact, since we only wait on module
  unload for all call_rcu()s to finish.)

  This fixes one race to bring RCU grace period guarantees back. Next step
  as worked on by Cong however is to fix 1e052be69d04 ("net_sched: destroy
  proto tp when all filters are gone") to get the order of unlinking the tp
  in tc_ctl_tfilter() for the RTM_DELTFILTER case right by moving
  RCU_INIT_POINTER() before tcf_destroy() and let the notification for
  removal be done through the prior ->delete() callback. Both are independant
  issues. Once we have that right, we can then clean tp->root up for a number
  of classifiers by not making them RCU pointers, which requires a new callback
  (->uninit) that is triggered from tp's RCU callback, where we just kfree()
  tp->root from there.

  Fixes: 1f947bf151e9 ("net: sched: rcu'ify cls_bpf")
  Fixes: 9888faefe132 ("net: sched: cls_basic use RCU")
  Fixes: 70da9f0bf999 ("net: sched: cls_flow use RCU")
  Fixes: 77b9900ef53a ("tc: introduce Flower classifier")
  Fixes: bf3994d2ed31 ("net/sched: introduce Match-all classifier")
  Fixes: 952313bd6258 ("net: sched: cls_cgroup use RCU")
  Reported-by: Roi Dayan <roid@mellanox.com>
  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
  Cc: Cong Wang <xiyou.wangcong@gmail.com>
  Cc: John Fastabend <john.fastabend@gmail.com>
  Cc: Roi Dayan <roid@mellanox.com>
  Cc: Jiri Pirko <jiri@mellanox.com>
  Acked-by: John Fastabend <john.r.fastabend@intel.com>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  net, sched: respect rcu grace period on cls destruction

  [ Upstream commit d936377414fadbafb4d17148d222fe45ca5442d4 ]

  Roi reported a crash in flower where tp->root was NULL in ->classify()
  callbacks. Reason is that in ->destroy() tp->root is set to NULL via
  RCU_INIT_POINTER(). It's problematic for some of the classifiers, because
  this doesn't respect RCU grace period for them, and as a result, still
  outstanding readers from tc_classify() will try to blindly dereference
  a NULL tp->root.

  The tp->root object is strictly private to the classifier implementation
  and holds internal data the core such as tc_ctl_tfilter() doesn't know
  about. Within some classifiers, such as cls_bpf, cls_basic, etc, tp->root
  is only checked for NULL in ->get() callback, but nowhere else. This is
  misleading and seemed to be copied from old classifier code that was not
  cleaned up properly. For example, d3fa76ee6b4a ("[NET_SCHED]: cls_basic:
  fix NULL pointer dereference") moved tp->root initialization into ->init()
  routine, where before it was part of ->change(), so ->get() had to deal
  with tp->root being NULL back then, so that was indeed a valid case, after
  d3fa76ee6b4a, not really anymore. We used to set tp->root to NULL long
  ago in ->destroy(), see 47a1a1d4be29 ("pkt_sched: remove unnecessary xchg()
  in packet classifiers"); but the NULLifying was reintroduced with the
  RCUification, but it's not correct for every classifier implementation.

  In the cases that are fixed here with one exception of cls_cgroup, tp->root
  object is allocated and initialized inside ->init() callback, which is always
  performed at a point in time after we allocate a new tp, which means tp and
  thus tp->root was not globally visible in the tp chain yet (see tc_ctl_tfilter()).
  Also, on destruction tp->root is strictly kfree_rcu()'ed in ->destroy()
  handler, same for the tp which is kfree_rcu()'ed right when we return
  from ->destroy() in tcf_destroy(). This means, the head object's lifetime
  for such classifiers is always tied to the tp lifetime. The RCU callback
  invocation for the two kfree_rcu() could be out of order, but that's fine
  since both are independent.

  Dropping the RCU_INIT_POINTER(tp->root, NULL) for these classifiers here
  means that 1) we don't need a useless NULL check in fast-path and, 2) that
  outstanding readers of that tp in tc_classify() can still execute under
  respect with RCU grace period as it is actually expected.

  Things that haven't been touched here: cls_fw and cls_route. They each
  handle tp->root being NULL in ->classify() path for historic reasons, so
  their ->destroy() implementation can stay as is. If someone actually
  cares, they could get cleaned up at some point to avoid the test in fast
  path. cls_u32 doesn't set tp->root to NULL. For cls_rsvp, I just added a
  !head should anyone actually be using/testing it, so it at least aligns with
  cls_fw and cls_route. For cls_flower we additionally need to defer rhashtable
  destruction (to a sleepable context) after RCU grace period as concurrent
  readers might still access it. (Note that in this case we need to hold module
  reference to keep work callback address intact, since we only wait on module
  unload for all call_rcu()s to finish.)

  This fixes one race to bring RCU grace period guarantees back. Next step
  as worked on by Cong however is to fix 1e052be69d04 ("net_sched: destroy
  proto tp when all filters are gone") to get the order of unlinking the tp
  in tc_ctl_tfilter() for the RTM_DELTFILTER case right by moving
  RCU_INIT_POINTER() before tcf_destroy() and let the notification for
  removal be done through the prior ->delete() callback. Both are independant
  issues. Once we have that right, we can then clean tp->root up for a number
  of classifiers by not making them RCU pointers, which requires a new callback
  (->uninit) that is triggered from tp's RCU callback, where we just kfree()
  tp->root from there.

  Fixes: 1f947bf151e9 ("net: sched: rcu'ify cls_bpf")
  Fixes: 9888faefe132 ("net: sched: cls_basic use RCU")
  Fixes: 70da9f0bf999 ("net: sched: cls_flow use RCU")
  Fixes: 77b9900ef53a ("tc: introduce Flower classifier")
  Fixes: bf3994d2ed31 ("net/sched: introduce Match-all classifier")
  Fixes: 952313bd6258 ("net: sched: cls_cgroup use RCU")
  Reported-by: Roi Dayan <roid@mellanox.com>
  Signed-off-by: Daniel Borkmann <daniel@iogearbox.net>
  Cc: Cong Wang <xiyou.wangcong@gmail.com>
  Cc: John Fastabend <john.fastabend@gmail.com>
  Cc: Roi Dayan <roid@mellanox.com>
  Cc: Jiri Pirko <jiri@mellanox.com>
  Acked-by: John Fastabend <john.r.fastabend@intel.com>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  l2tp: fix racy SOCK_ZAPPED flag check in l2tp_ip{,6}_bind()

  [ Upstream commit 32c231164b762dddefa13af5a0101032c70b50ef ]

  Lock socket before checking the SOCK_ZAPPED flag in l2tp_ip6_bind().
  Without lock, a concurrent call could modify the socket flags between
  the sock_flag(sk, SOCK_ZAPPED) test and the lock_sock() call. This way,
  a socket could be inserted twice in l2tp_ip6_bind_table. Releasing it
  would then leave a stale pointer there, generating use-after-free
  errors when walking through the list or modifying adjacent entries.

  BUG: KASAN: use-after-free in l2tp_ip6_close+0x22e/0x290 at addr ffff8800081b0ed8
  Write of size 8 by task syz-executor/10987
  CPU: 0 PID: 10987 Comm: syz-executor Not tainted 4.8.0+ #39
  Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS rel-1.8.2-0-g33fbe13 by qemu-project.org 04/01/2014
   ffff880031d97838 ffffffff829f835b ffff88001b5a1640 ffff8800081b0ec0
   ffff8800081b15a0 ffff8800081b6d20 ffff880031d97860 ffffffff8174d3cc
   ffff880031d978f0 ffff8800081b0e80 ffff88001b5a1640 ffff880031d978e0
  Call Trace:
   [<ffffffff829f835b>] dump_stack+0xb3/0x118 lib/dump_stack.c:15
   [<ffffffff8174d3cc>] kasan_object_err+0x1c/0x70 mm/kasan/report.c:156
   [<     inline     >] print_address_description mm/kasan/report.c:194
   [<ffffffff8174d666>] kasan_report_error+0x1f6/0x4d0 mm/kasan/report.c:283
   [<     inline     >] kasan_report mm/kasan/report.c:303
   [<ffffffff8174db7e>] __asan_report_store8_noabort+0x3e/0x40 mm/kasan/report.c:329
   [<     inline     >] __write_once_size ./include/linux/compiler.h:249
   [<     inline     >] __hlist_del ./include/linux/list.h:622
   [<     inline     >] hlist_del_init ./include/linux/list.h:637
   [<ffffffff8579047e>] l2tp_ip6_close+0x22e/0x290 net/l2tp/l2tp_ip6.c:239
   [<ffffffff850b2dfd>] inet_release+0xed/0x1c0 net/ipv4/af_inet.c:415
   [<ffffffff851dc5a0>] inet6_release+0x50/0x70 net/ipv6/af_inet6.c:422
   [<ffffffff84c4581d>] sock_release+0x8d/0x1d0 net/socket.c:570
   [<ffffffff84c45976>] sock_close+0x16/0x20 net/socket.c:1017
   [<ffffffff817a108c>] __fput+0x28c/0x780 fs/file_table.c:208
   [<ffffffff817a1605>] ____fput+0x15/0x20 fs/file_table.c:244
   [<ffffffff813774f9>] task_work_run+0xf9/0x170
   [<ffffffff81324aae>] do_exit+0x85e/0x2a00
   [<ffffffff81326dc8>] do_group_exit+0x108/0x330
   [<ffffffff81348cf7>] get_signal+0x617/0x17a0 kernel/signal.c:2307
   [<ffffffff811b49af>] do_signal+0x7f/0x18f0
   [<ffffffff810039bf>] exit_to_usermode_loop+0xbf/0x150 arch/x86/entry/common.c:156
   [<     inline     >] prepare_exit_to_usermode arch/x86/entry/common.c:190
   [<ffffffff81006060>] syscall_return_slowpath+0x1a0/0x1e0 arch/x86/entry/common.c:259
   [<ffffffff85e4d726>] entry_SYSCALL_64_fastpath+0xc4/0xc6
  Object at ffff8800081b0ec0, in cache L2TP/IPv6 size: 1448
  Allocated:
  PID = 10987
   [ 1116.897025] [<ffffffff811ddcb6>] save_stack_trace+0x16/0x20
   [ 1116.897025] [<ffffffff8174c736>] save_stack+0x46/0xd0
   [ 1116.897025] [<ffffffff8174c9ad>] kasan_kmalloc+0xad/0xe0
   [ 1116.897025] [<ffffffff8174cee2>] kasan_slab_alloc+0x12/0x20
   [ 1116.897025] [<     inline     >] slab_post_alloc_hook mm/slab.h:417
   [ 1116.897025] [<     inline     >] slab_alloc_node mm/slub.c:2708
   [ 1116.897025] [<     inline     >] slab_alloc mm/slub.c:2716
   [ 1116.897025] [<ffffffff817476a8>] kmem_cache_alloc+0xc8/0x2b0 mm/slub.c:2721
   [ 1116.897025] [<ffffffff84c4f6a9>] sk_prot_alloc+0x69/0x2b0 net/core/sock.c:1326
   [ 1116.897025] [<ffffffff84c58ac8>] sk_alloc+0x38/0xae0 net/core/sock.c:1388
   [ 1116.897025] [<ffffffff851ddf67>] inet6_create+0x2d7/0x1000 net/ipv6/af_inet6.c:182
   [ 1116.897025] [<ffffffff84c4af7b>] __sock_create+0x37b/0x640 net/socket.c:1153
   [ 1116.897025] [<     inline     >] sock_create net/socket.c:1193
   [ 1116.897025] [<     inline     >] SYSC_socket net/socket.c:1223
   [ 1116.897025] [<ffffffff84c4b46f>] SyS_socket+0xef/0x1b0 net/socket.c:1203
   [ 1116.897025] [<ffffffff85e4d685>] entry_SYSCALL_64_fastpath+0x23/0xc6
  Freed:
  PID = 10987
   [ 1116.897025] [<ffffffff811ddcb6>] save_stack_trace+0x16/0x20
   [ 1116.897025] [<ffffffff8174c736>] save_stack+0x46/0xd0
   [ 1116.897025] [<ffffffff8174cf61>] kasan_slab_free+0x71/0xb0
   [ 1116.897025] [<     inline     >] slab_free_hook mm/slub.c:1352
   [ 1116.897025] [<     inline     >] slab_free_freelist_hook mm/slub.c:1374
   [ 1116.897025] [<     inline     >] slab_free mm/slub.c:2951
   [ 1116.897025] [<ffffffff81748b28>] kmem_cache_free+0xc8/0x330 mm/slub.c:2973
   [ 1116.897025] [<     inline     >] sk_prot_free net/core/sock.c:1369
   [ 1116.897025] [<ffffffff84c541eb>] __sk_destruct+0x32b/0x4f0 net/core/sock.c:1444
   [ 1116.897025] [<ffffffff84c5aca4>] sk_destruct+0x44/0x80 net/core/sock.c:1452
   [ 1116.897025] [<ffffffff84c5ad33>] __sk_free+0x53/0x220 net/core/sock.c:1460
   [ 1116.897025] [<ffffffff84c5af23>] sk_free+0x23/0x30 net/core/sock.c:1471
   [ 1116.897025] [<ffffffff84c5cb6c>] sk_common_release+0x28c/0x3e0 ./include/net/sock.h:1589
   [ 1116.897025] [<ffffffff8579044e>] l2tp_ip6_close+0x1fe/0x290 net/l2tp/l2tp_ip6.c:243
   [ 1116.897025] [<ffffffff850b2dfd>] inet_release+0xed/0x1c0 net/ipv4/af_inet.c:415
   [ 1116.897025] [<ffffffff851dc5a0>] inet6_release+0x50/0x70 net/ipv6/af_inet6.c:422
   [ 1116.897025] [<ffffffff84c4581d>] sock_release+0x8d/0x1d0 net/socket.c:570
   [ 1116.897025] [<ffffffff84c45976>] sock_close+0x16/0x20 net/socket.c:1017
   [ 1116.897025] [<ffffffff817a108c>] __fput+0x28c/0x780 fs/file_table.c:208
   [ 1116.897025] [<ffffffff817a1605>] ____fput+0x15/0x20 fs/file_table.c:244
   [ 1116.897025] [<ffffffff813774f9>] task_work_run+0xf9/0x170
   [ 1116.897025] [<ffffffff81324aae>] do_exit+0x85e/0x2a00
   [ 1116.897025] [<ffffffff81326dc8>] do_group_exit+0x108/0x330
   [ 1116.897025] [<ffffffff81348cf7>] get_signal+0x617/0x17a0 kernel/signal.c:2307
   [ 1116.897025] [<ffffffff811b49af>] do_signal+0x7f/0x18f0
   [ 1116.897025] [<ffffffff810039bf>] exit_to_usermode_loop+0xbf/0x150 arch/x86/entry/common.c:156
   [ 1116.897025] [<     inline     >] prepare_exit_to_usermode arch/x86/entry/common.c:190
   [ 1116.897025] [<ffffffff81006060>] syscall_return_slowpath+0x1a0/0x1e0 arch/x86/entry/common.c:259
   [ 1116.897025] [<ffffffff85e4d726>] entry_SYSCALL_64_fastpath+0xc4/0xc6
  Memory state around the buggy address:
   ffff8800081b0d80: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
   ffff8800081b0e00: fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc fc
  >ffff8800081b0e80: fc fc fc fc fc fc fc fc fb fb fb fb fb fb fb fb
                                                      ^
   ffff8800081b0f00: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb
   ffff8800081b0f80: fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb fb

  ==================================================================

  The same issue exists with l2tp_ip_bind() and l2tp_ip_bind_table.

  Fixes: c51ce49735c1 ("l2tp: fix oops in L2TP IP sockets for connect() AF_UNSPEC case")
  Reported-by: Baozeng Ding <sploving1@gmail.com>
  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Tested-by: Baozeng Ding <sploving1@gmail.com>
  Signed-off-by: Guillaume Nault <g.nault@alphalink.fr>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  af_unix: conditionally use freezable blocking calls in read

  [ Upstream commit 06a77b07e3b44aea2b3c0e64de420ea2cfdcbaa9 ]

  Commit 2b15af6f95 ("af_unix: use freezable blocking calls in read")
  converts schedule_timeout() to its freezable version, it was probably
  correct at that time, but later, commit 2b514574f7e8
  ("net: af_unix: implement splice for stream af_unix sockets") breaks
  the strong requirement for a freezable sleep, according to
  commit 0f9548ca1091:

      We shouldn't try_to_freeze if locks are held.  Holding a lock can cause a
      deadlock if the lock is later acquired in the suspend or hibernate path
      (e.g.  by dpm).  Holding a lock can also cause a deadlock in the case of
      cgroup_freezer if a lock is held inside a frozen cgroup that is later
      acquired by a process outside that group.

  The pipe_lock is still held at that point.

  So use freezable version only for the recvmsg call path, avoid impact for
  Android.

  Fixes: 2b514574f7e8 ("net: af_unix: implement splice for stream af_unix sockets")
  Reported-by: Dmitry Vyukov <dvyukov@google.com>
  Cc: Tejun Heo <tj@kernel.org>
  Cc: Colin Cross <ccross@android.com>
  Cc: Rafael J. Wysocki <rafael.j.wysocki@intel.com>
  Cc: Hannes Frederic Sowa <hannes@stressinduktion.org>
  Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  net: check dead netns for peernet2id_alloc()

  [ Upstream commit cfc44a4d147ea605d66ccb917cc24467d15ff867 ]

  Andrei reports we still allocate netns ID from idr after we destroy
  it in cleanup_net().

  cleanup_net():
    ...
    idr_destroy(&net->netns_ids);
    ...
    list_for_each_entry_reverse(ops, &pernet_list, list)
      ops_exit_list(ops, &net_exit_list);
        -> rollback_registered_many()
          -> rtmsg_ifinfo_build_skb()
           -> rtnl_fill_ifinfo()
             -> peernet2id_alloc()

  After that point we should not even access net->netns_ids, we
  should check the death of the current netns as early as we can in
  peernet2id_alloc().

  For net-next we can consider to avoid sending rtmsg totally,
  it is a good optimization for netns teardown path.

  Fixes: 0c7aecd4bde4 ("netns: add rtnl cmd to add and get peer netns ids")
  Reported-by: Andrei Vagin <avagin@gmail.com>
  Cc: Nicolas Dichtel <nicolas.dichtel@6wind.com>
  Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
  Acked-by: Andrei Vagin <avagin@openvz.org>
  Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  virtio-net: add a missing synchronize_net()

  [ Upstream commit 963abe5c8a0273a1cf5913556da1b1189de0e57a ]

  It seems many drivers do not respect napi_hash_del() contract.

  When napi_hash_del() is used before netif_napi_del(), an RCU grace
  period is needed before freeing NAPI object.

  Fixes: 91815639d880 ("virtio-net: rx busy polling support")
  Signed-off-by: Eric Dumazet <edumazet@google.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Acked-by: Michael S. Tsirkin <mst@redhat.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  KVM: x86: check for pic and ioapic presence before use

  commit df492896e6dfb44fd1154f5402428d8e52705081 upstream.

  Split irqchip allows pic and ioapic routes to be used without them being
  created, which results in NULL access.  Check for NULL and avoid it.
  (The setup is too racy for a nicer solutions.)

  Found by syzkaller:

    general protection fault: 0000 [#1] SMP DEBUG_PAGEALLOC KASAN
    Dumping ftrace buffer:
       (ftrace buffer empty)
    Modules linked in:
    CPU: 3 PID: 11923 Comm: kworker/3:2 Not tainted 4.9.0-rc5+ #27
    Hardware name: QEMU Standard PC (i440FX + PIIX, 1996), BIOS Bochs 01/01/2011
    Workqueue: events irqfd_inject
    task: ffff88006a06c7c0 task.stack: ffff880068638000
    RIP: 0010:[...]  [...] __lock_acquire+0xb35/0x3380 kernel/locking/lockdep.c:3221
    RSP: 0000:ffff88006863ea20  EFLAGS: 00010006
    RAX: dffffc0000000000 RBX: dffffc0000000000 RCX: 0000000000000000
    RDX: 0000000000000039 RSI: 0000000000000000 RDI: 1ffff1000d0c7d9e
    RBP: ffff88006863ef58 R08: 0000000000000001 R09: 0000000000000000
    R10: 00000000000001c8 R11: 0000000000000000 R12: ffff88006a06c7c0
    R13: 0000000000000001 R14: ffffffff8baab1a0 R15: 0000000000000001
    FS:  0000000000000000(0000) GS:ffff88006d100000(0000) knlGS:0000000000000000
    CS:  0010 DS: 0000 ES: 0000 CR0: 0000000080050033
    CR2: 00000000004abdd0 CR3: 000000003e2f2000 CR4: 00000000000026e0
    Stack:
     ffffffff894d0098 1ffff1000d0c7d56 ffff88006863ecd0 dffffc0000000000
     ffff88006a06c7c0 0000000000000000 ffff88006863ecf8 0000000000000082
     0000000000000000 ffffffff815dd7c1 ffffffff00000000 ffffffff00000000
    Call Trace:
     [...] lock_acquire+0x2a2/0x790 kernel/locking/lockdep.c:3746
     [...] __raw_spin_lock include/linux/spinlock_api_smp.h:144
     [...] _raw_spin_lock+0x38/0x50 kernel/locking/spinlock.c:151
     [...] spin_lock include/linux/spinlock.h:302
     [...] kvm_ioapic_set_irq+0x4c/0x100 arch/x86/kvm/ioapic.c:379
     [...] kvm_set_ioapic_irq+0x8f/0xc0 arch/x86/kvm/irq_comm.c:52
     [...] kvm_set_irq+0x239/0x640 arch/x86/kvm/../../../virt/kvm/irqchip.c:101
     [...] irqfd_inject+0xb4/0x150 arch/x86/kvm/../../../virt/kvm/eventfd.c:60
     [...] process_one_work+0xb40/0x1ba0 kernel/workqueue.c:2096
     [...] worker_thread+0x214/0x18a0 kernel/workqueue.c:2230
     [...] kthread+0x328/0x3e0 kernel/kthread.c:209
     [...] ret_from_fork+0x2a/0x40 arch/x86/entry/entry_64.S:433

  Reported-by: Dmitry Vyukov <dvyukov@google.com>
  Fixes: 49df6397edfc ("KVM: x86: Split the APIC from the rest of IRQCHIP.")
  Signed-off-by: Radim Krčmář <rkrcmar@redhat.com>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  can: bcm: fix warning in bcm_connect/proc_register

  commit deb507f91f1adbf64317ad24ac46c56eeccfb754 upstream.

  Andrey Konovalov reported an issue with proc_register in bcm.c.
  As suggested by Cong Wang this patch adds a lock_sock() protection and
  a check for unsuccessful proc_create_data() in bcm_connect().

  Reference: http://marc.info/?l=linux-netdev&m=147732648731237

  Reported-by: Andrey Konovalov <andreyknvl@google.com>
  Suggested-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Oliver Hartkopp <socketcan@hartkopp.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Tested-by: Andrey Konovalov <andreyknvl@google.com>
  Signed-off-by: Marc Kleine-Budde <mkl@pengutronix.de>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  i40e: fix call of ndo_dflt_bridge_getlink()

  commit 599b076d15ee3ead7af20fc907079df00b2d59a0 upstream.

  Order of arguments is wrong.
  The wrong code has been introduced by commit 7d4f8d871ab1, but is compiled
  only since commit 9df70b66418e.

  Note that this may break netlink dumps.

  Fixes: 9df70b66418e ("i40e: Remove incorrect #ifdef's")
  Fixes: 7d4f8d871ab1 ("switchdev; add VLAN support for port's bridge_getlink")
  CC: Carolyn Wyborny <carolyn.wyborny@intel.com>
  Signed-off-by: Huaibin Wang <huaibin.wang@6wind.com>
  Signed-off-by: Nicolas Dichtel <nicolas.dichtel@6wind.com>
  Tested-by: Andrew Bowers <andrewx.bowers@intel.com>
  Signed-off-by: Jeff Kirsher <jeffrey.t.kirsher@intel.com>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  swapfile: fix memory corruption via malformed swapfile

  commit dd111be69114cc867f8e826284559bfbc1c40e37 upstream.

  When root activates a swap partition whose header has the wrong
  endianness, nr_badpages elements of badpages are swabbed before
  nr_badpages has been checked, leading to a buffer overrun of up to 8GB.

  This normally is not a security issue because it can only be exploited
  by root (more specifically, a process with CAP_SYS_ADMIN or the ability
  to modify a swap file/partition), and such a process can already e.g.
  modify swapped-out memory of any other userspace process on the system.

  Link: http://lkml.kernel.org/r/1477949533-2509-1-git-send-email-jann@thejh.net
  Signed-off-by: Jann Horn <jann@thejh.net>
  Acked-by: Kees Cook <keescook@chromium.org>
  Acked-by: Jerome Marchand <jmarchan@redhat.com>
  Acked-by: Johannes Weiner <hannes@cmpxchg.org>
  Cc: "Kirill A. Shutemov" <kirill.shutemov@linux.intel.com>
  Cc: Vlastimil Babka <vbabka@suse.cz>
  Cc: Hugh Dickins <hughd@google.com>
  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  drm/radeon/dp: add back special handling for NUTMEG

  commit c8213a638f65bf487c10593c216525952cca3690 upstream.

  When I fixed the dp rate selection in:
  092c96a8ab9d1bd60ada2ed385cc364ce084180e
  drm/radeon: fix dp link rate selection (v2)
  I accidently dropped the special handling for NUTMEG
  DP bridge chips.  They require a fixed link rate.

  Reviewed-by: Christian König <christian.koenig@amd.com>
  Reviewed-by: Ken Wang <Qingqing.Wang@amd.com>
  Reviewed-by: Harry Wentland <harry.wentland@amd.com>
  Tested-by: Ken Moffat <zarniwhoop@ntlworld.com>
  Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  drm/amdgpu/dp: add back special handling for NUTMEG

  commit 02d27234759dc4fe14a880ec1e1dee108cb0b503 upstream.

  When I fixed the dp rate selection in:
  3b73b168cffd9c392584d3f665021fa2190f8612
  drm/amdgpu: fix dp link rate selection (v2)
  I accidently dropped the special handling for NUTMEG
  DP bridge chips.  They require a fixed link rate.

  Reviewed-by: Christian König <christian.koenig@amd.com>
  Reviewed-by: Ken Wang <Qingqing.Wang@amd.com>
  Reviewed-by: Harry Wentland <harry.wentland@amd.com>
  Signed-off-by: Alex Deucher <alexander.deucher@amd.com>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  net sched filters: fix notification of filter delete with proper handle

  [ Upstream commit 9ee7837449b3d6f0fcf9132c6b5e5aaa58cc67d4 ]

  Daniel says:

  While trying out [1][2], I noticed that tc monitor doesn't show the
  correct handle on delete:

  $ tc monitor
  qdisc clsact ffff: dev eno1 parent ffff:fff1
  filter dev eno1 ingress protocol all pref 49152 bpf handle 0x2a [...]
  deleted filter dev eno1 ingress protocol all pref 49152 bpf handle 0xf3be0c80

  some context to explain the above:
  The user identity of any tc filter is represented by a 32-bit
  identifier encoded in tcm->tcm_handle. Example 0x2a in the bpf filter
  above. A user wishing to delete, get or even modify a specific filter
  uses this handle to reference it.
  Every classifier is free to provide its own semantics for the 32 bit handle.
  Example: classifiers like u32 use schemes like 800:1:801 to describe
  the semantics of their filters represented as hash table, bucket and
  node ids etc.
  Classifiers also have internal per-filter representation which is different
  from this externally visible identity. Most classifiers set this
  internal representation to be a pointer address (which allows fast retrieval
  of said filters in their implementations). This internal representation
  is referenced with the "fh" variable in the kernel control code.

  When a user successfuly deletes a specific filter, by specifying the correct
  tcm->tcm_handle, an event is generated to user space which indicates
  which specific filter was deleted.

  Before this patch, the "fh" value was sent to user space as the identity.
  As an example what is shown in the sample bpf filter delete event above
  is 0xf3be0c80. This is infact a 32-bit truncation of 0xffff8807f3be0c80
  which happens to be a 64-bit memory address of the internal filter
  representation (address of the corresponding filter's struct cls_bpf_prog);

  After this patch the appropriate user identifiable handle as encoded
  in the originating request tcm->tcm_handle is generated in the event.
  One of the cardinal rules of netlink rules is to be able to take an
  event (such as a delete in this case) and reflect it back to the
  kernel and successfully delete the filter. This patch achieves that.

  Note, this issue has existed since the original TC action
  infrastructure code patch back in 2004 as found in:
  https://git.kernel.org/cgit/linux/kernel/git/history/history.git/commit/

  [1] http://patchwork.ozlabs.org/patch/682828/
  [2] http://patchwork.ozlabs.org/patch/682829/

  Fixes: 4e54c4816bfe ("[NET]: Add tc extensions infrastructure.")
  Reported-by: Daniel Borkmann <daniel@iogearbox.net>
  Acked-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: Jamal Hadi Salim <jhs@mojatatu.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  ipv4: use the right lock for ping_group_range

  [ Upstream commit 396a30cce15d084b2b1a395aa6d515c3d559c674 ]

  This reverts commit a681574c99be23e4d20b769bf0e543239c364af5
  ("ipv4: disable BH in set_ping_group_range()") because we never
  read ping_group_range in BH context (unlike local_port_range).

  Then, since we already have a lock for ping_group_range, those
  using ip_local_ports.lock for ping_group_range are clearly typos.

  We might consider to share a same lock for both ping_group_range
  and local_port_range w.r.t. space saving, but that should be for
  net-next.

  Fixes: a681574c99be ("ipv4: disable BH in set_ping_group_range()")
  Fixes: ba6b918ab234 ("ping: move ping_group_range out of CONFIG_SYSCTL")
  Cc: Eric Dumazet <edumazet@google.com>
  Cc: Eric Salo <salo@google.com>
  Signed-off-by: Cong Wang <xiyou.wangcong@gmail.com>
  Signed-off-by: David S. Miller <davem@davemloft.net>
  Signed-off-by: Greg Kroah-Hartman <gregkh@linuxfoundation.org>
- |-
  Merge pull request #42 from sahal/master

  This version is more logical and less ugly
- |-
  Merge branch 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs

  Pull vfs updates from Al Viro:

   - more ->d_init() stuff (work.dcache)

   - pathname resolution cleanups (work.namei)

   - a few missing iov_iter primitives - copy_from_iter_full() and
     friends. Either copy the full requested amount, advance the iterator
     and return true, or fail, return false and do _not_ advance the
     iterator. Quite a few open-coded callers converted (and became more
     readable and harder to fuck up that way) (work.iov_iter)

   - several assorted patches, the big one being logfs removal

  * 'for-linus' of git://git.kernel.org/pub/scm/linux/kernel/git/viro/vfs:
    logfs: remove from tree
    vfs: fix put_compat_statfs64() does not handle errors
    namei: fold should_follow_link() with the step into not-followed link
    namei: pass both WALK_GET and WALK_MORE to should_follow_link()
    namei: invert WALK_PUT logics
    namei: shift interpretation of LOOKUP_FOLLOW inside should_follow_link()
    namei: saner calling conventions for mountpoint_last()
    namei.c: get rid of user_path_parent()
    switch getfrag callbacks to ..._full() primitives
    make skb_add_data,{_nocache}() and skb_copy_to_page_nocache() advance only on success
    [iov_iter] new primitives - copy_from_iter_full() and friends
    don't open-code file_inode()
    ceph: switch to use of ->d_init()
    ceph: unify dentry_operations instances
    lustre: switch to use of ->d_init()
- |-
  ovl: clean up kstat usage

  FWIW, there's a bit of abuse of struct kstat in overlayfs object
  creation paths - for one thing, it ends up with a very small subset
  of struct kstat (mode + rdev), for another it also needs link in
  case of symlinks and ends up passing it separately.

  IMO it would be better to introduce a separate object for that.

  In principle, we might even lift that thing into general API and switch
   ->mkdir()/->mknod()/->symlink() to identical calling conventions.  Hell
  knows, perhaps ->create() as well...

  Signed-off-by: Miklos Szeredi <mszeredi@redhat.com>
- |-
  vhost: remove unused feature bit

  Signed-off-by: Jason Wang <jasowang@redhat.com>
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
- |-
  tools/virtio: use {READ,WRITE}_ONCE() in uaccess.h

  As a step towards killing off ACCESS_ONCE, use {READ,WRITE}_ONCE() for the
  virtio tools uaccess primitives, pulling these in from <linux/compiler.h>.

  With this done, we can kill off the now-unused ACCESS_ONCE() definition.

  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: linux-kernel@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  tools/virtio: use {READ,WRITE}_ONCE() in uaccess.h

  As a step towards killing off ACCESS_ONCE, use {READ,WRITE}_ONCE() for the
  virtio tools uaccess primitives, pulling these in from <linux/compiler.h>.

  With this done, we can kill off the now-unused ACCESS_ONCE() definition.

  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: linux-kernel@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  vringh: kill off ACCESS_ONCE()

  Despite living under drivers/ vringh.c is also used as part of the userspace
  virtio tools. Before we can kill off the ACCESS_ONCE()definition in the tools,
  we must convert vringh.c to use {READ,WRITE}_ONCE().

  This patch does so, along with the required include of <linux/compiler.h> for
  the relevant definitions. The userspace tools provide their own definitions in
  their own <linux/compiler.h>.

  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: kvm@vger.kernel.org
  Cc: linux-kernel@vger.kernel.org
  Cc: netdev@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  vringh: kill off ACCESS_ONCE()

  Despite living under drivers/ vringh.c is also used as part of the userspace
  virtio tools. Before we can kill off the ACCESS_ONCE()definition in the tools,
  we must convert vringh.c to use {READ,WRITE}_ONCE().

  This patch does so, along with the required include of <linux/compiler.h> for
  the relevant definitions. The userspace tools provide their own definitions in
  their own <linux/compiler.h>.

  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: kvm@vger.kernel.org
  Cc: linux-kernel@vger.kernel.org
  Cc: netdev@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Christian Borntraeger <borntraeger@de.ibm.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  tools/virtio: fix READ_ONCE()

  The virtio tools implementation of READ_ONCE() has a single parameter called
  'var', but erroneously refers to 'val' for its cast, and thus won't work unless
  there's a variable of the correct type that happens to be called 'var'.

  Fix this with s/var/val/, making READ_ONCE() work as expected regardless.

  Fixes: a7c490333df3cff5 ("tools/virtio: use virt_xxx barriers")
  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: linux-kernel@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  tools/virtio: fix READ_ONCE()

  The virtio tools implementation of READ_ONCE() has a single parameter called
  'var', but erroneously refers to 'val' for its cast, and thus won't work unless
  there's a variable of the correct type that happens to be called 'var'.

  Fix this with s/var/val/, making READ_ONCE() work as expected regardless.

  Fixes: a7c490333df3cff5 ("tools/virtio: use virt_xxx barriers")
  Signed-off-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Jason Wang <jasowang@redhat.com>
  Cc: Michael S. Tsirkin <mst@redhat.com>
  Cc: linux-kernel@vger.kernel.org
  Cc: virtualization@lists.linux-foundation.org
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Cornelia Huck <cornelia.huck@de.ibm.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- |-
  vhost: cache used event for better performance

  When event index was enabled, we need to fetch used event from
  userspace memory each time. This userspace fetch (with memory
  barrier) could be saved sometime when 1) caching used event and 2)
  if used event is ahead of new and old to new updating does not cross
  it, we're sure there's no need to notify guest.

  This will be useful for heavy tx load e.g guest pktgen test with Linux
  driver shows ~3.5% improvement.

  Signed-off-by: Jason Wang <jasowang@redhat.com>
  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
- |-
  Merge tag 'xfs-for-linus-4.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/dgc/linux-xfs

  Pull xfs updates from Dave Chinner:
   "There is quite a varied bunch of stuff in this update, and some of it
    you will have already merged through the ext4 tree which imported the
    dax-4.10-iomap-pmd topic branch from the XFS tree.

    There is also a new direct IO implementation that uses the iomap
    infrastructure. It's much simpler, faster, and has lower IO latency
    than the existing direct IO infrastructure.

    Summary:
     - DAX PMD faults via iomap infrastructure
     - Direct-io support in iomap infrastructure
     - removal of now-redundant XFS inode iolock, replaced with VFS
       i_rwsem
     - synchronisation with fixes and changes in userspace libxfs code
     - extent tree lookup helpers
     - lots of little corruption detection improvements to verifiers
     - optimised CRC calculations
     - faster buffer cache lookups
     - deprecation of barrier/nobarrier mount options - we always use
       REQ_FUA/REQ_FLUSH where appropriate for data integrity now
     - cleanups to speculative preallocation
     - miscellaneous minor bug fixes and cleanups"

  * tag 'xfs-for-linus-4.10-rc1' of git://git.kernel.org/pub/scm/linux/kernel/git/dgc/linux-xfs: (63 commits)
    xfs: nuke unused tracepoint definitions
    xfs: use GPF_NOFS when allocating btree cursors
    xfs: use xfs_vn_setattr_size to check on new size
    xfs: deprecate barrier/nobarrier mount option
    xfs: Always flush caches when integrity is required
    xfs: ignore leaf attr ichdr.count in verifier during log replay
    xfs: use rhashtable to track buffer cache
    xfs: optimise CRC updates
    xfs: make xfs btree stats less huge
    xfs: don't cap maximum dedupe request length
    xfs: don't allow di_size with high bit set
    xfs: error out if trying to add attrs and anextents > 0
    xfs: don't crash if reading a directory results in an unexpected hole
    xfs: complain if we don't get nextents bmap records
    xfs: check for bogus values in btree block headers
    xfs: forbid AG btrees with level == 0
    xfs: several xattr functions can be void
    xfs: handle cow fork in xfs_bmap_trace_exlist
    xfs: pass state not whichfork to trace_xfs_extlist
    xfs: Move AGI buffer type setting to xfs_read_agi
    ...
- |-
  virtio_console: drop unused config fields

  struct ports_device includes a config field including the whole
  virtio_console_config, but only max_nr_ports in there is ever updated or
  used. The rest is unused and in fact does not even mirror the
  device config. Drop everything except max_nr_ports,
  saving some memory.

  Signed-off-by: Michael S. Tsirkin <mst@redhat.com>
  Reviewed-by: Jason Wang <jasowang@redhat.com>
- "kdb: call vkdb_printf() from vprintk_default() only when wanted\n\nkdb_trap_printk
  allows to pass normal printk() messages to kdb via\nvkdb_printk().  For example,
  it is used to get backtrace using the\nclassic show_stack(), see kdb_show_stack().\n\nvkdb_printf()
  tries to avoid a potential infinite loop by disabling the\ntrap.  But this approach
  is racy, for example:\n\nCPU1\t\t\t\t\tCPU2\n\nvkdb_printf()\n  // assume that kdb_trap_printk
  == 0\n  saved_trap_printk = kdb_trap_printk;\n  kdb_trap_printk = 0;\n\n\t\t\t\t\tkdb_show_stack()\n\t\t\t\t\t
  \ kdb_trap_printk++;\n\nProblem1: Now, a nested printk() on CPU0 calls vkdb_printf()\n\t
  \ even when it should have been disabled. It will not\n\t  cause a deadlock but...\n\n
  \  // using the outdated saved value: 0\n   kdb_trap_printk = saved_trap_printk;\n\n\t\t\t\t\t
  \ kdb_trap_printk--;\n\nProblem2: Now, kdb_trap_printk == -1 and will stay like
  this.\n   It means that all messages will get passed to kdb from\n   now on.\n\nThis
  patch removes the racy saved_trap_printk handling.  Instead, the\nrecursion is prevented
  by a check for the locked CPU.\n\nThe solution is still kind of racy.  A non-related
  printk(), from\nanother process, might get trapped by vkdb_printf().  And the wanted\nprintk()
  might not get trapped because kdb_printf_cpu is assigned.  But\nthis problem existed
  even with the original code.\n\nA proper solution would be to get_cpu() before setting
  kdb_trap_printk\nand trap messages only from this CPU.  I am not sure if it is worth
  the\neffort, though.\n\nIn fact, the race is very theoretical.  When kdb is running
  any of the\ncommands that use kdb_trap_printk there is a single active CPU and the\nother
  CPUs should be in a holding pen inside kgdb_cpu_enter().\n\nThe only time this is
  violated is when there is a timeout waiting for\nthe other CPUs to report to the
  holding pen.\n\nFinally, note that the situation is a bit schizophrenic.  vkdb_printf()\nexplicitly
  allows recursion but only from KDB code that calls\nkdb_printf() directly.  On the
  other hand, the generic printk()\nrecursion is not allowed because it might cause
  an infinite loop.  This\nis why we could not hide the decision inside vkdb_printf()
  easily.\n\nLink: http://lkml.kernel.org/r/1480412276-16690-4-git-send-email-pmladek@suse.com\nSigned-off-by:
  Petr Mladek <pmladek@suse.com>\nCc: Daniel Thompson <daniel.thompson@linaro.org>\nCc:
  Jason Wessel <jason.wessel@windriver.com>\nCc: Peter Zijlstra <peterz@infradead.org>\nCc:
  Sergey Senozhatsky <sergey.senozhatsky@gmail.com>\nSigned-off-by: Andrew Morton
  <akpm@linux-foundation.org>\nSigned-off-by: Linus Torvalds <torvalds@linux-foundation.org>"
- |-
  kcov: add more missing includes

  It is fragile that some definitions acquired via transitive
  dependencies, as shown in below:

  atomic_*        (<linux/atomic.h>)
  ENOMEM/EN*      (<linux/errno.h>)
  EXPORT_SYMBOL   (<linux/export.h>)
  device_initcall (<linux/init.h>)
  preempt_*       (<linux/preempt.h>)

  Include them to prevent possible issues.

  Link: http://lkml.kernel.org/r/1481163221-40170-1-git-send-email-wangkefeng.wang@huawei.com
  Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
  Suggested-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Dmitry Vyukov <dvyukov@google.com>
  Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
  Cc: Mark Rutland <mark.rutland@arm.com>
  Cc: James Morse <james.morse@arm.com>
  Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
- |-
  kcov: add more missing includes

  It is fragile that some definitions acquired via transitive
  dependencies, as shown in below:

  atomic_*        (<linux/atomic.h>)
  ENOMEM/EN*      (<linux/errno.h>)
  EXPORT_SYMBOL   (<linux/export.h>)
  device_initcall (<linux/init.h>)
  preempt_*       (<linux/preempt.h>)

  Include them to prevent possible issues.

  Link: http://lkml.kernel.org/r/1481163221-40170-1-git-send-email-wangkefeng.wang@huawei.com
  Signed-off-by: Kefeng Wang <wangkefeng.wang@huawei.com>
  Suggested-by: Mark Rutland <mark.rutland@arm.com>
  Cc: Dmitry Vyukov <dvyukov@google.com>
  Cc: Andrey Ryabinin <aryabinin@virtuozzo.com>
  Cc: Mark Rutland <mark.rutland@arm.com>
  Cc: James Morse <james.morse@arm.com>
  Cc: Kefeng Wang <wangkefeng.wang@huawei.com>
  Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
  Signed-off-by: Linus Torvalds <torvalds@linux-foundation.org>
- fixed other valgrind read error, ugly but works :)
- Fixed X11 stroke rect drawing
- |-
  Fixed hole in combobox and window border drawing

  Hopefully I finally fixed the hole inside combobox popup which only
  occur if you set the window border size greater one. In addition
  I fixed some subpixel drawing artifacts that come up if you use
  antialising in combination with vertex buffer output.
- |-
  Fixed hole in combobox and window border drawing

  Hopefully I finally fixed the hole inside combobox popup which only
  occur if you set the window border size greater one. In addition
  I fixed some subpixel drawing artifacts that come up if you use
  antialising in combination with vertex buffer output.
- |-
  Fixed #165 C++11 specific error

  Surprising turn out, the C++ standard comitee consists of a bunch of
  retards invalidating completely fine code and requesting super
  idiotic work arounds for their new versions. I have no fucking idea
  why these spaces are required and honestly I don't even want to know.
  Whatever the reason it should now compile fine with C++11 until the^
  next C++ version will probably invalidate it again. To a better
  future I can't wait.
- |-
  Added selectable label + images #151 (breaking)

  This is a breaking change to hopefully noone. I removed all drawing
  callbacks inside `nk_style` structs. The reason is that they are
  quite ugly and a lot of work to maintain in the future. In addition
  I added `nk_selectable_image_text`, `nk_selectable_image_label`,
  `nk_select_image_text` and `nk_select_image_label` for combined
  text and image selectables.
- |-
  Fixed #135 rendering bug

  This commit fixes a stupid reallocation bug I had inside the library.
  Basically I get a pointer inside a growing buffer which can be
  invalidated by a second allocation and regrowth of said buffer.
  Under normal circumstances I do not do this but in one instance I
  actually did. That is for allocation temporary normals. This issue
  should now be fixed and work correctly.
- |-
  Revert "Update libphonennumber for new shortcode metadata"

  This reverts commit 8c58d031bd31f0da39e9516f24a713948e8f992f.

  wtf is wrong with google
- |-
  Fix passphrase string resource reference

  Fixes a stupid mistake in pr #5095 where I changed a string again but
  forgot to change the resource reference in code :/

  Closes #5140
  // FREEBIE
- Remove the ugly log_raw() api.
- bug fixed for mysql parser. support syntax 'set xxx = ON
- |-
  Include a trailing newline in printStatusMap output

  This makes it harder to screw up when doing things like concatenating
  bazel-out/{stable,volatile}-status.txt in a genrule, and makes console
  output slightly nicer when you print them to stdout.

  --
  Change-Id: Ib558ddcb09e66452a4780355716d9d6d1d143355
  Reviewed-on: https://cr.bazel.build/7190
  PiperOrigin-RevId: 141044546
  MOS_MIGRATED_REVID=141044546
- fix drawable stroke lines for button group
- 'Fix #15. Stupid bug by me.'
- |-
  Improve support pre-JB for Activity detection

  This uses an older API (available to ICS+) to track activities instead
  of relying on an ugly reflection trick known to work only on JB+ (and of
  course not future proof).  There's a slight overhead increase in
  Stetho.initialize as a result, but the timings added indicate it is
  still very small (1-2ms on my Nexus 5).

  The mechanism for tracking activities is partially exposed via
  ActivityTracker which has a manual add/remove method which allows
  developers to add support for pre-ICS even by hooking their own
  application onCreate/onDestroy events just like HierarchyViewer's
  ViewServer used in the past.

  Closes #123
- "Use Error Prone's @LazyInit annotation as a signal to upgrade reference type fields
  to volatile semantics to avoid unsafe racy inits.\n\n\tChange on 2016/11/24 by kstanger
  <kstanger@google.com>\n\n-------------\nCreated by MOE: https://github.com/google/moe\nMOE_MIGRATED_REVID=140129608"
- Update link for Naked Objects paper
- That damn @SimonVT...
- Drop all the old Maven and jar crap from the website.
- |-
  Page Circle Fill Color

  Allow the circular indicator to have a specified fill colour for the page circles.

  - "pageColor" colour attribute
  - defaulted to transparent
  - calculate draw radius by removing stroke if non-zero
  - skip drawing if transparent
  - skip stroke paint if zero width
  - examples in "Styled (via layout)" and "Styled (via methods)"
- |-
  Page Circle Fill Color

  Allow the circular indicator to have a specified fill colour for the page circles.

  - "pageColor" colour attribute
  - defaulted to transparent
  - calculate draw radius by removing stroke if non-zero
  - skip drawing if transparent
  - skip stroke paint if zero width
  - examples in "Styled (via layout)" and "Styled (via methods)"
- Whoops. Stupid maven.
- Add circle stroke width as an option.
- Fix name in read me file. Stupid nano...
- Stupid commenting out error...
- remove old apache crap
- gradle crap
- goddamn gradle publishing
- |-
  Add exclusion of robovm.xml for fat jars

  Adds an exclusion of robovm.xml for the android sub project to avoid conflicts due to the android gradle plugin and non platform specific dependencies that support robovm.
- |-
  Remove some ugly signature and useless comments.

  There are more in Android classes, but that's less my domain.
- |-
  PooledByteBufAllocatorTest may has memory visiblity issues as it uses non concurrent queue

  Motivation:

  PooledByteBufAllocatorTest uses an ArrayQueue but access it from multiple threads (not concurrently but still from different threads). This may leak to memory visibility issues.

  Modifications:

  - Use a concurrent queue
  - Some cleanup

  Result:

  Non racy test code.
- |-
  [#6015] Fix racy PooledByteBufAllocatorTests

  Motivation:

  We had a few tests PooledByteBufAllocatorTests which used parkNanos(...) to give a resource enough time to get destroyed. This is race and may not be good enough.

  Modifications:

  Ensure the ThreadCache is really destroyed.

  Result:

  No more racy tests that depend on ThreadCaches.
- |-
  [#6015] Fix racy PooledByteBufAllocatorTests

  Motivation:

  We had a few tests PooledByteBufAllocatorTests which used parkNanos(...) to give a resource enough time to get destroyed. This is race and may not be good enough.

  Modifications:

  Ensure the ThreadCache is really destroyed.

  Result:

  No more racy tests that depend on ThreadCaches.
- |-
  reduce lock contention in resource leak

  Motivation:
  ResourceLeakDetector shows two main problems, racy access and heavy lock contention.

  Modifications:
  This PR fixes this by doing two things:
  1.  Replace the sampling counter with a ThreadLocalRandom.  This has two benefits.
      First, it makes the sampling ration no longer have to be a power of two.  Second,
      it de-noises the continuous races that fight over this single value.  Instead,
      this change uses slightly more CPU to decide if it should sample by using TLR.
  2.  DefaultResourceLeaks need to be kept alive in order to catch leaks.  The means
      by which this happens is by a singular, doubly-linked list.  This creates a
      large amount of contention when allocating quickly.  This is noticeable when
      running on a multi core machine.

      Instead, this uses a concurrent hash map to keep track of active resources
      which has much better contention characteristics.

  Results:
  Better concurrent hygiene.  Running the gRPC QPS benchmark showed RLD taking about
  3 CPU seconds for every 1 wall second when runnign with 12 threads.

  There are some minor perks to this as well.  DefaultResourceLeak accounting is
  moved to a central place which probably has better caching behavior.
- "Fixes self-tracing of storage component (#1315)\n\nThere were some typos and a
  missing test around storage self-tracing.\r\nThis plugs the hole and tidies related
  things."
- Fill before stroke - because the fill may cover half of a thick stroke
- Fill before stroke - because the fill may cover half of a thick stroke
- |-
  Add SavedState fot Slider class.
  Change visual of Switch class.
  Change stroke attribute of Slider and Switch class to track attribute.
- mFriends don't let sFriends use the ugly Hungarian notation.
- |-
  Made whole lot of changes:
  - Now the tabs can't be inflated other than using an XML resource.
  - Ditched the PopupMenu shit and menu a custom parser for the tabs.
  - Wrote some actual unit tests for the custom parser!
  - Aiming for a complete refactor with proper testing, so no more regression bugs.
- |-
  Merge pull request #7263 from dsyer/feature/custom-layout

  * gh-7263-2:
    Add custom LayoutFactory sample
    Support custom fat jar layouts
    Rework Repacakger timeout code
- |-
  Support custom fat jar layouts

  Allow support for custom Lyout implementations with both the Maven
  and Gradle plugin. Implementations of `LayoutFactory` can now be
  specified to allow customization of the layout. In addition a
  layout may now implement `CustomLoaderLayout` if it wishes to
  write custom loader classes.

  See gh-7263
- |-
  Refine validation auto-configuration

  Checking for the presence of a `ValidationProvider` resource is
  unfortunately not enough to trigger the validation auto-configuration.

  If `hibernate-validator` is added on the classpath without a `javax.el`
  implementation, the former will blow up on startup. So far this was a
  pilot error so we didn't have to care about it. Now that we have an
  auto-configuration that may lead to this error, we need to be extra
  careful and check that scenario ourselves.

  This commit adds an extra condition that runs as late as possible and
  attempt to actually initialize a `Validator`. If that fails for whatever
  reason, the auto-configuration will now back off.

  Several additional tests have been added to exercise this scenario.

  Closes gh-6228
- |-
  Allow HandlerFunction to return Mono<ServerResponse>

  This commit makes it possible for handler functions to return
  asynchronous status codes and headers, by making HandlerFunction.handle
  return a Mono<ServerResponse> instead of a ServerResponse. As a
  consequence, all other types that deal with HandlerFunctions
  (RouterFunction, HandlerFilterFunction, etc.) had to change as well.

  However, when combining the above change with method references (a very
  typical use case), resulting signatures would have been something like:

  ```
  public Mono<ServerResponse<Mono<Person>>> getPerson(ServerRequest request)
  ```

  which was too ugly to consider, especially the two uses of Mono. It was
  considered to merge ServerResponse with the last Mono, essentialy making
  ServerResponse always contain a Publisher, but this had unfortunate
  consequences in view rendering.

  It was therefore decided to drop the parameterization of ServerResponse,
  as the only usage of the extra type information was to manipulate the
  response objects in a filter. Even before the above change this was
  suggested; it just made the change even more necessary.

  As a consequence, `BodyInserter` could be turned into a real
  `FunctionalInterface`, which resulted in changes in ClientRequest.

  We did, however, make HandlerFunction.handle return a `Mono<? extends
  ServerResponse>`, adding little complexity, but allowing for
  future `ServerResponse` subtypes that do expose type information, if
  it's needed. For instance, a RenderingResponse could expose the view
  name and model.

  Issue: SPR-14870
- |-
  Fix JIT binding attempts for generic or annotated keys.

  This should never happen normally, but in some cases - notably proguard cases - where an `@Provides`  method is not pre-loaded, the attempt to bind falls into the jit-binding and built-in binding case. This results in a null className, and the current error is obscure.  Instead, just throw an IAE with the key which is caught and reported in a less crappy way.

  Unfortunately, this is nearly impossible to test, without hacking up the build system. :(
- |-
  Add maven central repo to readme

  jCenter is the standard shit now...

  Fixes #117
- Oops, fix fat finger typo from last change
- "[eslint config] [*] use `in-publish` because coffeescript screwed up the prepublish
  script for everyone"
- |-
  chore(grunt): check node, yarn and grunt-cli versions

  If global versions of node, yarn or grunt-cli don't match what we expect then blow up.
- "fix(progressCircular): fix arc bleeding through container (#10108)\n\nSVG arc was
  not properly sized which caused it to bleed through it's container.\r\nIn some configurations,
  the circle would be cropped\r\n\r\n* Account for strokeWidth when measuring dash
  length\r\n* Set offset in arc path equal to half of stroke width\r\n\r\nFixes #10107"
- "fix(progressCircular): update animation to spec (#10017)\n\nPrevious animation
  did not properly animate the circle stroke\r\n\r\n* Use persistent SVG path for
  all animations\r\n* Change `stroke-dashoffset` to match spec on every requested
  frame\r\n* Rotate object -90 degrees every iteration\r\n* Correct overall counter
  clockwise animation timing in SCSS\r\n\r\nInstead of creating a new SVG path every
  frame, we will instead simply\r\nanimate the `stroke-dashoffset` parameter. This
  allows us to match spec\r\nwhile also increasing performance by simplifying logic
  per frame.\r\n\r\nFixes #9879"
- "Fix default parameter - rest parameter edge case (#3572)\n\nWhen the rest parameter
  shared the same name as a default identifier\r\nfor a param, the loop would be hoisted
  outside the function!\r\n\r\n```js\r\nvar a = 1;\r\n\r\nfor (var _len = arguments.length,
  a = Array(_len > 1 ? _len - 1 : 0),\r\n_key = 1; _key < _len; _key++) {\r\n  a[_key
  - 1] = arguments[_key];\r\n}\r\n\r\nfunction foo2() {\r\n  var b = arguments.length
  <= 0 || arguments[0] === undefined ? a :\r\narguments[0];\r\n\r\n  assert.equal(b,
  1);\r\n}\r\nfoo2(undefined, 2);\r\n```\r\n\r\nAnd if you tried to reference any
  index or `#length`, it’d blow up and\r\nrefuse to transpile."
- Updated GAE backends with memcache as file store.
- |-
  Remove test that fails on WebKit due to bizzare iframe bug

  The test verifies that, in an iframe, we can navigate to another page
  and then press browser's Back button to restore the previous page.

  However, on Chrome and Safari in pjax-disabled mode (browser native
  behavior) doing `frame.history.back()` actually goes back in the top
  frame, effectively navigating away from the test suite that's running.
  There doesn't seem a way to carefully sandbox browser history navigation
  to just inside the iframe.

  Because this test has the potential to intermittently screw up the whole
  test suite run, :fire: it without mercy as I've already spent countless
  hours trying to debug this and have better things to do with my life.
- |-
  Merge pull request #345 from ChrisMcKee/master

  Fat Pull
- cleaning up stupid mistakes
- '"`goto` is back, bye bye ugly `stepTo`"'
- |-
  Bump to v1.3.1

  Because I screwed up the 1.3.0 release by not building the min files...
  Sorry everyone.
- |-
  New feature : reset the debounce

  It seems a little crappy to add a function into a function, but it provides a feature that was asked in #952 without breaking backward compatibility.
- |-
  Merge pull request #769 from langpavel/fix-content-page

  Comments in router, to avoid common WTF moment
- stupid DS_Store thing again, first time using GH on a mac
- damn tabs
- |-
  Merge pull request #2517 from seven-phases-max/fix-naked-url-import

  Quick fix for naked `url` imports
- Fix naked url import
- |-
  Only skip parsing a stream in `Parser_makeFilter` when we know for sure that it is empty (PR 6372 follow-up)

  For PDF files with multiple `/Filter`s, where the `/Length` entry is zero, we fail to render the file correctly. The reason is that `maybeLength` is `null` for the every filter except the first, and `!maybeLength` is thus truthy.
  Hence it seems that we should completely ignore the `/Length` entry and also explicitly check `maybeLength === 0`.

  Note that I've not (yet) come across a PDF file with this issue in the wild, but given all the stupid things PDF generators do I wouldn't be surprised if such a file actually exists. In order to prevent a possible future bug, I'm submitting this patch which includes a hand-edited PDF file that we currently cannot render correctly (but e.g. Adobe Reader can).
- |-
  Ensure that the zoom buttons are disabled correctly if the `scale` is smaller/larger than `MIN_SCALE/MAX_SCALE` in `PDFViewerApplication._updateUIToolbar`

  In the `zoom{In, Out}` functions in `PDFViewerApplication`, we prevent the zoom value from becoming smaller/larger than `MIN_SCALE/MAX_SCALE`.
  However, if the user sets the zoom level through the hash parameter the zoom buttons might not be correctly disabled; try http://mozilla.github.io/pdf.js/web/viewer.html#zoom=10.

  Note that this issue has been present since "forever", but given that the solution is so simple I think that we should just fix this. (I'm also fixing a stupid typo I previously made in the JSDoc comment.)
- Updated Bone doc
- |-
  Merge pull request #79 from xer0k00l/smacked_my_bitch_added_to_go

  golang smacked my bitch up
- golang smacked my bitch up
- |-
  Merge pull request #49 from waksana/master

  fucking coffee using coffeescript
- fucking coffee using coffeescript
- |-
  shrinkwrap: Improve detection of pkgs req'd by top level dev deps

  Specifically, we now don't blow the stack on dev deps that have cycles.

  Fixes: #13327
- |-
  fix(search): Don't re-query search results on status change

  If that method is fired immediately twice in a row, it's possible for
  this._set to not re-instantiate causing the results to be blow away
- Convert the async example to using fat arrow functions. (#1945)
- Fat arrow functions in the counter example (#1942)
- Sometimes, humans do stupid things. This was one of them.
- 'chore(performance): remove lodash dependency for big ass buffer.toString module
  at fixed size'
- First crack at compiler API docs
- "Remove crappy folders from node_modules in dist tarballs (#1810)\n\n* Remove crappy
  folders from node_modules in dist tarballs\r\n\r\n* add windows version of scripts/clean-node-modules"
- "Remove crappy folders from node_modules in dist tarballs (#1810)\n\n* Remove crappy
  folders from node_modules in dist tarballs\r\n\r\n* add windows version of scripts/clean-node-modules"
- |-
  fixes related to issue #132:  logic error with --exclude-dir;
  when using --vcs XXX, only consider files/dirs that were passed in on
  the command line; allow --vcs XXX to work with file filters
- Added note about fat comma quoting.
- Argh! Stupid git achievements!
- |-
  Renaming blacklist.txt to sourcelist.txt

  For the love of all that is holy. GamerGate is completely incapable of any kind of critical thought, and it appears I've got to hold their hands and wipe their asses. For fuck's sake.

  This is not creating a "blacklist" to keep people out of the industry, you unemployed neckbeard (if you could grow a beard) cockwaffles. It is creating a "blocklist" so normal people don't have to listen to your incoherent looneybin conspiracy theories peppered by whatever's on your political word-of-the-day calendar.

  It's hilarious that you're pretending to be anime characters on IRC/reddit/8chan while somehow loathing women that kick ass and have anime hair irl. I really don't know how you consolidate that one in the barren pit of a wasteland you call a brain, but I'm sure Mr. TotalBallsack can help you with it. I hear he's got an IQ of 155. He's all class and ready to lead you lemmings off a cliff. More power to him. You are the army that no one wants but he deserves.

  You can't sue anyone from a list that's generated off Twitter's API. I wish you could. I really hope you try, because it would make my *year* if I got served for the case "'HotDog Gamer Goblin' v Randi Harper". Please. I am begging you. No? Bueller? Anyone?

  Literally go fuck yourselves.

   - LiterallyBlue.
- |-
  Renaming blacklist.txt to sourcelist.txt

  For the love of all that is holy. GamerGate is completely incapable of any kind of critical thought, and it appears I've got to hold their hands and wipe their asses. For fuck's sake.

  This is not creating a "blacklist" to keep people out of the industry, you unemployed neckbeard (if you could grow a beard) cockwaffles. It is creating a "blocklist" so normal people don't have to listen to your incoherent looneybin conspiracy theories peppered by whatever's on your political word-of-the-day calendar.

  It's hilarious that you're pretending to be anime characters on IRC/reddit/8chan while somehow loathing women that kick ass and have anime hair irl. I really don't know how you consolidate that one in the barren pit of a wasteland you call a brain, but I'm sure Mr. TotalBallsack can help you with it. I hear he's got an IQ of 155. He's all class and ready to lead you lemmings off a cliff. More power to him. You are the army that no one wants but he deserves.

  You can't sue anyone from a list that's generated off Twitter's API. I wish you could. I really hope you try, because it would make my *year* if I got served for the case "'HotDog Gamer Goblin' v Randi Harper". Please. I am begging you. No? Bueller? Anyone?

  Literally go fuck yourselves.

   - LiterallyBlue.
- |-
  butts slightly less ugly now.

  * added better rate limit checks
  * now saving followers that follow the calling user to a file
  * fixed some busted logic
  * functions instead of repeating code (bleh)
- STUPID TYPO DON'T LOOK AT ME I AM HIDEOUS
- |-
  Invoke a stable 'git status' command to check for cleanliness.

  Git 1.8.0 changed the format of 'git status' from

      ... (working directory clean)

  to
      ..., working directory clean

  This kind of harmless modification of prose output happens pretty regularly,
  and relying on the prose parts to determine the result of a Git command is
  pretty fragile.

  Fortunately, Git folks are aware of this, and provide stable interfaces too.
  For 'git status', the programmatic interface is 'git status --porcelain',
  which has a stable (and much simpler) output format, with one line per
  non-clean file. Empty output indicates a clean tree.

  I haven't spent a huge amount of effort finding other places this might bite;
  with this change git-deploy works (to the best of my testing, which isn't much)
  on Git 1.8.0.

  Note we cannot just use `git status --porcelain`'s output to report to
  the user, as it would produce some ugly output:

      :)owen@Dashie:example (master)$ git deploy start
      # FATAL: working directory not clean. git status reports:
      # FATAL: ?? .deploy
      # FATAL: ?? foo
      Died at /Users/owen/Development/git-deploy/git-deploy line 45.

  Se we use `git status --porcelain` for checking the cleanliness of the work tree,
  but `check_if_working_dir_is_clean` once again returns non-`--porcelain` output,
  returning the UI to a sensible state:

      :(owen@Dashie:example (master)$ git deploy start
      # FATAL: working directory not clean. git status reports:
      # FATAL: On branch master
      # FATAL: Untracked files:
      # FATAL: (use "git add <file>..." to include in what will be committed)
      # FATAL: .deploy
      # FATAL: foo
      # FATAL: nothing added to commit but untracked files present (use "git add" to track)
      Died at /Users/owen/Development/git-deploy/git-deploy line 45.

  Putting the second call inside of `check_if_working_dir_is_clean` keeps the changes
  pretty localized, even though this sub only has one caller.

  Note that there is not much point in "optimizing" this code, for
  instance by rolling our own "pretty" status mode: the file system will
  be hot after the initial status, and the second should be quite fast as
  a consequence.

  Committers Note: This is a rebased/squash of two commits, with edits to
  the message. Also, the code this patch refers to predates the options this patch
  uses to fix things, which is why it wasn't used in the first place. -- Yves
- |-
  Git::Deploy::Say: don't refuse to work if we can't log

  Instead of dying if we can't log just warn once per invocation
  instead, just because the permissions on our logfile are screwed that
  doesn't mean we should halt all deployments.

  In addition this logging code was overly verbose because it was trying
  only to open the log handle and computing the log filename once per
  process. We can just use Memoize for that and save ourselves the
  verbosity.
- |-
  Git::Deploy: less stupid per-repository config names

  When I wrote 35ce6695f368fba035a2b0dbc19a4adae978a4f2 I had forgotten
  that you could write double-quoted values like:

      [deploy "some-value"]

  Change the repository-specific config schema to:

      [deploy "repository git-deploy"]

  So now we get it with e.g.:

      git config --file .git/git-deploy.conf --get "deploy.repository git-deploy.tag-prefix"

  Before the fallback of:

      git config --file .git/git-deploy.conf --get deploy.tag-prefix
- |-
  Git::Deploy: support per-repo config in the global config file

  The current config system assumed that we would have a .git/config
  file for the rollout repositories. This would have sucked for our
  puppet-powered configuration since any local changes (e.g. branch
  creation) in .git/config would have been overwritten.

  Instead support keys like:

      deploy-repo-$REPO.$key

  In addition to:

      deploy.$key

  The more specific deploy-repo-$REPO settings override the default
  deploy settings. So we can have a config like:

      $ cat /etc/gitconfig
      [deploy]
          config-file = /etc/git-deploy.conf
      $ cat /etc/git-deploy.conf
      ;; Global options
      [deploy]
              ;; Force users to have this umask
              restrict-umask = 0002

              ;; If this file exists all rollouts are blocked
              rollouts-blocked = /etc/bookings/ROLLOUTS_BLOCKED

              ;; E-Mail addresses to complain to when stuff goes wrong.
              support-email = internal, e-mails

              ;; What strategy should we use to detect the repo name?
              repo-name-detection = dot-git-parent-dir

      ;; Per-repo options, keys here override equivalent keys in the
      ;; global options
      [deploy-repo-main]
              ;; Prefix to give to tags created here. A prefix of 'debug'
              ;; will result in debug-YYYYMMDD-HHMMSS tags
              tag-prefix = dev-cron

              ;; In main.git we put the .deploy file in lib/.deploy. this is
              ;; because traditionally we only synced out the lib
              ;; folder. Now we sync out everything, but the code still
              ;; assumes this.
              deploy-file = lib/.deploy

              ;; Where the git-deploy hooks live
              hook-dir = path-to-hook-dir

  Note the deploy.repo-name-detection key, if this is
  dot-git-parent-dir (currently no other values are supported) we'll get
  the name of the directory the .git file is in, and use that as the
  deploy-repo-$REPO value.

  This allows us to have all our config in puppet in
  /etc/git-deploy.conf, leaving .git/config to only have repo-specific
  options.

  This code probably has bugs, I really have a hard time understanding
  Yves's code sometimes...
- a stupid test that does something
- removed ugly try catch
- |-
  * Removed config file option
  * Removed binary output file option
  * Eliminated parse_args() and moved argument handling to getopt() in main()
  * Removed '-' option to force STDOUT
  * Pushed output format list data structure into list.c
  * Rewrote list management functions for clarity and efficiency
  * Moved all format list logic into list.c where it belongs
  * Removed display_version() function
  * Renamed display_help() to display_usage()
  * Rewrote parse_format_string() for clarity
  * Replaced find_node() with insert_value() and pushed all related logic into list.c
  * Rewrote free_list() with far less stupid than before
  * Fixed minor memory leak on exit when -n was in effect
  * Changed all error/warning/informational printing macro names to uppercase
  * Eliminated client request and server response structs
  * Removed httpry.h
  * Renamed print_names() to print_header_line()
  * Partially updated documentation
  * Updated usage output text
- |-
  bullshit one letter repo name

  Signed-off-by: Jessica Frazelle <princess@docker.com>
- |-
  update grep shit

  Signed-off-by: Jessica Frazelle <princess@docker.com>
- |-
  fucking unix socket for mpd

  Signed-off-by: Jessica Frazelle <princess@docker.com>
- |-
  Taking over Debian package maintenance from Joey

  I am monstrously pissed at a lot of things right now.
- no more factory crap
- fix beer advocate title
- invalid parameter send to recentlyAdded. Invalid for newer PMS versions
- IP logging fix for anyone using PMS 0.9.9.3+
- do not decode already decoded content ( live xml from PMS )
- Allow Port 32443 - PMS SSL and bump version to 0.1.0 - major.minor.fixes_others
  is the idea
- 'Do not blow the cache on 50x responses, fixes issue #6'
- |-
  Merge branch 'production'

  * production:
    Update pot files using current code and production database.
    Update translations from transifex.
- |-
  Merge branch 'beta' into production

  * beta:
    Update pot files using current code and production database.
    Update translations from transifex.
    Fix typo in variable name
    Replace deprecated Postgres keyword
    MBS-9142: Return unmatched variable in link phrase
    MBS-7654: Remove "Infer track length from recording" option
    Give CacheWrapper a dummy disconnect method
    Remove set -e in run_tests.sh
    MBS-9140: Language menu has ids instead of names
    MBS-9138: Avoid redundant requests for image-less entities
    MBS-9136: Fix the TracksWithSequenceIssues report
    Add test for MBS-9102
    Set "ended" flags explicitly in Age tests
    MBS-9102: Don't try to calculate an age without a year
    Rewrite some code for readability
    MBS-9102: Correctly recognize ended entities for age
- Update pot files using current code and production database.
- |-
  Merge branch 'beta' into production

  * beta: (127 commits)
    Make fabfile work with current docker setup
    Update pot files using current code and production database.
    Don't apt-purge make
    Update translations from transifex.
    Fix AliasType _type
    Remove the Unicode::Encoding Catalyst plugin
    Remove unused imports
    Never compress .gz files
    Warn in INSTALL.md that the chosen server type is final
    Explain how to upgrade npm in INSTALL.md
    Comment out disabled test
    Add missing modules to cpanfile
    Replace deprecated "use encoding"
    Add missing 'exec' so signals are passed properly
    Fix fullexport rsync paths
    deploy_static_resources.sh fixes
    Fix the rsync target paths
    msggrep is needed at run-time
    compile_resources.sh depends on lib/DBDefs.pm
    Copy common files near the end
    ...
- |-
  Merge branch 'master' into beta

  * master: (127 commits)
    Make fabfile work with current docker setup
    Update pot files using current code and production database.
    Don't apt-purge make
    Update translations from transifex.
    Fix AliasType _type
    Remove the Unicode::Encoding Catalyst plugin
    Remove unused imports
    Never compress .gz files
    Warn in INSTALL.md that the chosen server type is final
    Explain how to upgrade npm in INSTALL.md
    Comment out disabled test
    Add missing modules to cpanfile
    Replace deprecated "use encoding"
    Add missing 'exec' so signals are passed properly
    Fix fullexport rsync paths
    deploy_static_resources.sh fixes
    Fix the rsync target paths
    msggrep is needed at run-time
    compile_resources.sh depends on lib/DBDefs.pm
    Copy common files near the end
    ...
- Update pot files using current code and production database.
- |-
  Don't apt-purge make

  It's needed at run-time too, to make pot files.
- |-
  Merge branch 'beta' into production

  * beta: (42 commits)
    Update translations from transifex.
    Add IMSLP Artist/Work URLs validation tests
    Fix IMSLP URLs validation in URLCleanup
    Update pot files using current code and production database.
    Update translations from transifex.
    Add cleanup/validation test for prefix-less wikisource.org
    Use HTTPS for Wikisource URLs
    Improve cleanup and validation for Wikisource URLs
    Make Discogs reports consider HTTPS URLs
    Consider HTTPS Amazon URLs for ASINs in the web service
    s/http/https/ in amazon test
    Clean up YouTube URLs to HTTPS
    Add newer country domains to BadAmazonURLs report query
    Simplify quoting in BadAmazonURLs report query
    Update reports for Amazon URLs using HTTPS
    Clean up Amazon URLs to HTTPS
    MBS-9087: Convert VIAF URLs for linking
    Fix a latent bug in MB::S::Data::WikipediaExtract
    Add tests for MBS-8269
    MBS-8269: Tighten validation for Wikimedia Commons URLs
    ...
- |-
  Merge branch 'master' into beta

  * master:
    Update pot files using current code and production database.
    Update translations from transifex.
- Update pot files using current code and production database.
- |-
  Merge branch 'beta' into production

  * beta: (40 commits)
    Update pot files using current code and production database.
    Update translations from transifex.
    MBS-9078: Take new Commons media viewer URL into account
    Add test for bandcamp album URLs validation
    Allow URLs for unmatched entity types
    Update pot files using current code and production database.
    Update translations from transifex.
    Clean up Discogs URLs to HTTPS
    Add validation test for Generasia URLs (MBS-8744)
    Specifically validate Generasia URLs (MBS-8744)
    MBS-8796: Set a referrer policy of "unsafe-url"
    Add test for MBS-9053
    Remove fragment identifiers from Wikimedia Commons URLs
    MBS-9053: Clean up mobile Wikimedia Commons URLs
    Use correct project name "Wikimedia Commons" in a comment
    Add tests for The Session URLs validation
    Validate The Session URLs (example for MBS-5733)
    Add tests for Soundtrack Collector URLs validation
    Strengthen Soundtrack Collector URLs validation
    MBS-5733: Allow to validate otherdatabases URLs
    ...
- |-
  Merge branch 'beta' into production

  * beta: (40 commits)
    Update pot files using current code and production database.
    Update translations from transifex.
    MBS-9078: Take new Commons media viewer URL into account
    Add test for bandcamp album URLs validation
    Allow URLs for unmatched entity types
    Update pot files using current code and production database.
    Update translations from transifex.
    Clean up Discogs URLs to HTTPS
    Add validation test for Generasia URLs (MBS-8744)
    Specifically validate Generasia URLs (MBS-8744)
    MBS-8796: Set a referrer policy of "unsafe-url"
    Add test for MBS-9053
    Remove fragment identifiers from Wikimedia Commons URLs
    MBS-9053: Clean up mobile Wikimedia Commons URLs
    Use correct project name "Wikimedia Commons" in a comment
    Add tests for The Session URLs validation
    Validate The Session URLs (example for MBS-5733)
    Add tests for Soundtrack Collector URLs validation
    Strengthen Soundtrack Collector URLs validation
    MBS-5733: Allow to validate otherdatabases URLs
    ...
- |-
  Merge branch 'master' into beta

  * master:
    Update pot files using current code and production database.
    Update translations from transifex.
- Update pot files using current code and production database.
- |-
  Merge branch 'master' into beta

  * master: (35 commits)
    Update pot files using current code and production database.
    Update translations from transifex.
    Clean up Discogs URLs to HTTPS
    Add validation test for Generasia URLs (MBS-8744)
    Specifically validate Generasia URLs (MBS-8744)
    MBS-8796: Set a referrer policy of "unsafe-url"
    Add test for MBS-9053
    Remove fragment identifiers from Wikimedia Commons URLs
    MBS-9053: Clean up mobile Wikimedia Commons URLs
    Use correct project name "Wikimedia Commons" in a comment
    Add tests for The Session URLs validation
    Validate The Session URLs (example for MBS-5733)
    Add tests for Soundtrack Collector URLs validation
    Strengthen Soundtrack Collector URLs validation
    MBS-5733: Allow to validate otherdatabases URLs
    Support site-based validation rules in URLCleanup
    More ruthlessly drop trailing characters from Discogs URLs
    MBS-9072: Validate the tagger port URL parameter
    Add test for MBS-9069
    MBS-9069: Allow cover art comments to have arbitrary length
    ...
- Update pot files using current code and production database.
- 'bugfix: -a option value handling was buggy. thanks Kan Wang for the patch.'
- |-
  Implement rule definitions as JSON

  Big change that encompasses several scopes, but doing it in one
  go makes things a lot cleaner. Rule files are now defined as .json
  files, not Lua modules. This means rulesets are no longer require'd,
  but rather read from disk via Lua's native I/O library and parsed.
  For default rulesets and default_option calls, this is done in the
  init_by_lua phase, where blocking I/O is safe.

  Because we're keeping the default_option/set_option logic in place,
  this means that scopes that add a ruleset outside the init phase
  are using blocking I/O in the event loop. Yes, this is a no-no,
  but for simplicity's sake we can allow this and document a big fat
  warning about this behavior (and the reality is the impact from this,
  barring some sort of underlying filesystem failure, is almost nil).

  Additionally, new negated operator syntax is now in place, and we've
  re-added function-type collections (added in this commit to get tests
  working).
- Shuffle test numbers to close hole
- Woo, WTF femove Makefile.PL
- |-
  POSIX.pm: shut up g++ compiler warning

  g++ is too stupid to know that strtoul(..,&unparsed,...) will modify
  unparsed. So initialise it to NULL.

  POSIX.xs: In function ‘void XS_POSIX_strtoul(PerlInterpreter*, CV*)’:
  POSIX.xs:3468:17: warning: ‘unparsed’ may be used uninitialized in this function [-Wmaybe-uninitialized]
                   if (unparsed)
- |-
  Update Archive-Tar to CPAN version 2.18

    [DELTA]

  2.18  07/11/2016 (JHI)
  - Capture also the STDERR when checking tar exe

  2.16  01/11/2016 (JHI && CBERRY)
  - Make roundtrip tar exe finding robust for crappy tars
- "[grammar] get rid of ugly >>>"
- |-
  Check that the object isa Dancer2::Plugin

  Instead of the assuming a hook may belong to the object as its coming
  from the Dancer2::Plugin namespace, check the object isa
  Dancer2::Plugin.

  XXX This needs moar testing.
- perltidy this shit
- XXX on the untaint
- Remove an XXX comment
- Removed a flag XXX
- Don't barf on tarballs
- Don't barf on tarballs
- |-
  Plack::App::File: Fix a security issue by not pruning trailing slashes

  Before this Plack::App::File would prune trailing slashes via its split
  invocation. I.e. it would think this:

      $ perl -MData::Dumper -wle 'print Dumper [split /[\\\/]/, shift]' a/file.txt
      $VAR1 = [
                'a',
                'file.txt'
              ];

  Was the same as:

      $ perl -MData::Dumper -wle 'print Dumper [split /[\\\/]/, shift]' a/file.txt///
      $VAR1 = [
                'a',
                'file.txt'
              ];

  This can. turn into a nasty code exposure issue if you e.g. have an app
  that basically does this:

      1. I'd do a regex /.txt.pl\z/ on a file to see if it was a text file
      2. If so, do magic to generate text file via perl
      3. Else it's not a /.txt.pl\z/ file, so it must be some other static
         file with a different extension
      4. Serve it up with Plack::Middleware::Static

  This is also not how other webservers or Unix utilities work:

      $ touch /tmp/foo.txt
      $ file /tmp/foo.txt
      /tmp/foo.txt: empty
      $ file /tmp/foo.txt/
      /tmp/foo.txt/: ERROR: cannot open `/tmp/foo.txt/' (Not a directory)

  This resolves issue #405 that I filed around 9 months ago. I was
  previously working around it in my own code by doing:

      {
          # Let's see if someone's trying to be evil by
          # requesting e.g. /index.html/ instead of
          # /index.html. We don't want to fall through
          # and just serve up the raw content.
          my $plack_app_file = Plack::App::File->new({ root => PLACK_WEBSERVER_DOCUMENT_ROOT() });
          my ($file) = $plack_app_file->locate_file($env);
          if (
              # We'll get a reference if it's a full
              # Plack response. I.e. a 404 or whatever.
              ref $file ne 'ARRAY'
              and
              # WTF once we canonicalize the file and it
              # looks like a Mason handled path let's
              # not accept it, because we don't want to
              # serve up the raw unprocessed Mason page
              # via this hack.
              $file =~ $mason_handles_this_path_rx
          ) {
              TELL "Middleware::Static: Path <$path> request, doesn't match <$mason_handles_this_path_rx>, but actually resolves to it via resolved file <$file>" if DEBUG;
              # Tells our app to just serve up a
              # 400. Apache would do a 404 but I think
              # these requests are bad, so say so.
              $env->{$magic_marker_to_return_400} = 1;
              return;
          }
      }
- Stupid mistake
- |-
  fix minor bugly in perms

  reminder: bugly = bug that makes something look ugly :)
- minor but ugly bug in refex expression sugar code
- |-
  access(): the pattern for refs is too strict for filenames

  a filename also becomes a "ref" if you use VREF/NAME.

  For some reason[1], it seems some people use crazy filenames like foo(0)
  or bar%20baz, and these things blow up on that test.

  --

  [1] viz., the lack of someone with good taste, like me, leading their
  project ;-)
- |-
  minor bugly...

  please remember we make up words here, like refex was a word we created
  to mean "a regex that matches a ref".

  A "bugly", then, is a bug that's merely ugly (and not a real problem!)
- |-
  'help' command barfage fix

  should not barf if LOCAL_CODE is defined but it doesn't contain a
  "commands" subdirectory.
- |-
  Eliminate rounding with sprintf().

  It gets screwed up by locale settings, where it can use , instead of . to
  represent a decimal point. It can be made to work with `no locale;` on 5.20,
  but not earlier versions of Perl, where
  [a bug](https://metacpan.org/pod/distribution/perl/pod/perl5200delta.pod#Locale-decimal-point-character-no-longer-leaks-outside-of-use-locale-scope)
  prevented that from working. So go back to having the databases handle the
  rounding. The sprintf was there because Firebirds' round() function sucks,
  so just work around that suckage by using substring() in Firebird.

  Resolves #234.
- "[rules] Confirm file existence ourselves to avoid the ugly make error."
- "[readme] Oh screw it, there's no way to use color in GFM."
- fixed a stupid bug... Now should work with V1, V2 and V4 signatures
- 'README.md: update scrot'
- remove crap
- 'ls++: Fixed stupid miss where multiple ls targets wasnt allowed. Added a header
  to distinguish the multiple targets'
- Remove the stupid eXecution permission on all tex source files.
- |-
  Fix for #791

  Fixed issue with search system as described in #791 . Queries created
  for search function would be like

  ```
  WHERE `anchor_posts`.`status` = ? AND `anchor_posts`.`title` like ? OR
  `anchor_posts`.`html` like ?
  ```

  but if both the title and content of a post contain the search term,
  the status check would be overwritten by the OR clause . The solution I
  made is a bit ugly so the syntax may need some change, asked for it on
  gitter but no replies. Anyway, this is a temporary fix.
- Dumbass skip message.
- |-
  [ci skip] Specify sphinxcontrib-phpdomain 0.1.3.post1 version

  Our Sphinx dependencies suck
- |-
  Adds Caddy and generic-terms to README

  Apache and Nginx aren't the only Http servers, damn it! :laughing:
- |-
  XSS Strings with context

  XSS Strings with context iformation for those who want to know wtf the
  xss is trying to do.
- Clean ugly hack in output of an executing task
- |-
  Reverting 741da7806c5d01796e243de9a122590151cb0c90, which was causing issues due to loose type checking

  See this example on why the revert is needed: https://3v4l.org/8T34v

  Code copied for reference:

  ```php
  <?php

  $a = 1;

  switch ($a) {
      case "1";
          echo "FUCK YOU, STUPID LANGUAGE!";
          break;
      case 1;
          echo __LINE__;
          break;
  }
  ```
- Damn you chrome update
- |-
  merged branch BRMatt/upgrade-guzzle (PR #71)

  Commits
  -------

  f8bcc3c Use guzzle/http instead of guzzle/guzzle, refs #70
  244e4c2 Upgrading guzzle dependency to 2.8.*, fixes #70

  Discussion
  ----------

  Upgrading guzzle dependency to 2.8.*, fixes #70

  Fixes #70

  ---------------------------------------------------------------------------

  by fabpot at 2012-07-19T14:09:45Z

  Would it be possible to switch to guzzle/http only instead of the full guzzle/guzzle package? What do you think @mtdowling

  ---------------------------------------------------------------------------

  by stof at 2012-07-19T14:55:16Z

  @fabpot apparently, ``guzzle/http`` depends on ``guzzle/common`` and ``guzzle/parser``, meaning you will still use the whole guzzle.

  ---------------------------------------------------------------------------

  by mtdowling at 2012-07-19T15:32:24Z

  Actually, switching to guzzle/http means you don't have to include the Guzzle/Service namespace. Seems like a good idea to me.

  On Jul 19, 2012, at 7:55 AM, Christophe Coevoet<reply@reply.github.com> wrote:

  > @fabpot apparently, ``guzzle/http`` depends on ``guzzle/common`` and ``guzzle/parser``, meaning you will still use the whole guzzle.
  >
  > ---
  > Reply to this email directly or view it on GitHub:
  > https://github.com/fabpot/Goutte/pull/71#issuecomment-7100479

  ---------------------------------------------------------------------------

  by stof at 2012-07-19T15:45:08Z

  @mtdowling guzzle/service is not available as a separate package ?

  ---------------------------------------------------------------------------

  by mtdowling at 2012-07-19T16:41:22Z

  Right, because it would be redundant; a guzzle/service package would require everything, so I left it out.

  On Jul 19, 2012, at 8:45 AM, Christophe Coevoet<reply@reply.github.com> wrote:

  > @mtdowling guzzle/service is not available as a separate package ?
  >
  > ---
  > Reply to this email directly or view it on GitHub:
  > https://github.com/fabpot/Goutte/pull/71#issuecomment-7102007

  ---------------------------------------------------------------------------

  by BRMatt at 2012-07-24T08:29:18Z

  @fabpot Would you like me to update the PR to use guzzle/http?

  ---------------------------------------------------------------------------

  by fabpot at 2012-07-24T08:35:27Z

  If possible, yes. Thanks.

  ---------------------------------------------------------------------------

  by BRMatt at 2012-07-24T16:03:32Z

  @fabpot Pushed the change

  ---------------------------------------------------------------------------

  by mtdowling at 2012-07-24T17:23:21Z

  Do we need to ship the composer.lock file with Goutte? If I remember correctly, this has caused multiple issues in the past. What's the benefit of the composer.lock file vs well defined dependencies in composer.json?

  ---------------------------------------------------------------------------

  by stof at 2012-07-24T17:35:53Z

  @mtdowling shipping the lock file with goutte is useless IMO: it would only be used when installing the vendors in goutte, i.e. when running its testsuite, not when installing it as a dependency

  ---------------------------------------------------------------------------

  by BRMatt at 2012-07-24T23:07:00Z

  @stof Surely that's a good enough reason to commit a lock file? You want to ensure that everybody running the test suite is using the same environment. Having a well configured composer.json file (I assume you mean explicit versioning) isn't enough, as being too explicit can cause dependency hell when different gems require similar versions of the same dependencies, or as in this case, you need bugfixes found in the latest version of the package's dependencies.

  The composer documentation also recommends committing the file.

  ---------------------------------------------------------------------------

  by stof at 2012-07-24T23:10:01Z

  @BRMatt if you lock the testsuite to an older version than the one selected by composer by default with your constraint, it means you are testing against a version different than the one used by your users.
  And composer recommends to commit it for projects, where you indeed want to lock the vendors.
- |-
  merged branch JEDIBC/postContentFix (PR #55)

  Commits
  -------

  5da05f5 . Split of the line of the previou patch for readability . Fixed coding standards with php-cs-fixer
  35209eb Merge remote-tracking branch 'upstream/master' into postContentFix
  ec33307 . use of ``null !==`` instead of ``!is_null()``
  f757aea . Fix POST when you use content to send your data and not parameters

  Discussion
  ----------

  Fix POST when you use content to send your data and not parameters

  Sometimes, you have to use $request->content to POST your datas instead of $request->parameters (for example sending a soap request)

  ---------------------------------------------------------------------------

  by JEDIBC at 2012-05-24T12:25:37Z

  Basically I need to crawl a crappy aspx website which take POST datas like : a=1&b=2&b=3&b=4 (multiple checkbox).
  So I use content instead of parameters which worked when the http client was the ZF2 one.
- 'Adding GAE check for curl_version. Closes #1164'
- |-
  Fix totally screwed code >:-)

  Better run once before push.
- |-
  Use error_clear_last() on PHP 7

  Instead of the ugly undefined variable hack
- "[tests] Fix me being stupid here."
- removing more crap
- |-
  Rename SettingsScreenTest to ZSettingsScreenTest

  ...as an ugly workaround to make this test run last, due to it changing
  the whole suite's data, causing other tests to fail.
- |-
  AB testing

  Added libuv to test suite
  Set port 8000 default unless specified; makes changing shit easier
- |-
  minor #1255 fixed deprecation notices (fabpot)

  This PR was merged into the 1.3 branch.

  Discussion
  ----------

  fixed deprecation notices

  Thanks @nicolas-grekas, that's ugly as I anticipated :(

  Commits
  -------

  67d4719 fixed deprecation notices
- |-
  minor #1233 removed references to the fat archive in the docs (fabpot)

  This PR was merged into the 2.0.x-dev branch.

  Discussion
  ----------

  removed references to the fat archive in the docs

  Commits
  -------

  826dac7 removed references to the fat archive in the docs
- |-
  minor #1233 removed references to the fat archive in the docs (fabpot)

  This PR was merged into the 2.0.x-dev branch.

  Discussion
  ----------

  removed references to the fat archive in the docs

  Commits
  -------

  826dac7 removed references to the fat archive in the docs
- |-
  minor #1233 removed references to the fat archive in the docs (fabpot)

  This PR was merged into the 2.0.x-dev branch.

  Discussion
  ----------

  removed references to the fat archive in the docs

  Commits
  -------

  826dac7 removed references to the fat archive in the docs
- removed references to the fat archive in the docs
- "[Core] Move stupid rule factory decoration to xml"
- 'ref #1272 -- fucking finally'
- update pot file
- finish gae install
- POT
- "get_payment_method relies on a more generic DOM element\n\nWhen checking the payment
  method, I think it would be better to rely on a more generic DOM element to make
  sure the find() method will find what it is looking for, in case theme authors have
  changed the position of things inside the form.\r\n\r\nIve stumble into this because
  I wanted to display the order review in the top of the page, before the billing
  form, but I wanted to keep the payment form at the end of the page, so, after changing
  the order_review DIV position, I did:\r\n\r\n```\r\nremove_action( 'woocommerce_checkout_order_review',
  'woocommerce_checkout_payment', 20);\r\nadd_action( 'woocommerce_checkout_after_customer_details',
  'woocommerce_checkout_payment');\r\n```\r\n\r\nAfter I did this, the get_payment_method
  stopped working.\r\n\r\nI might be wrong, but I think this proposal gives more flexibility
  to theme authors, while not breaking anything. This tweak Ive done dont look really
  ugly to me, I think I should be able to move things inside the checkout form around.\r\n\r\nThanks
  for looking into it\r\n\r\ncheers"
- |-
  REST API: Move translator comments to preceding line.

  Inline translator comments break POT file generation.

  Props dd32.
  See #38791.

  Built from https://develop.svn.wordpress.org/trunk@39239


  git-svn-id: http://core.svn.wordpress.org/trunk@39179 1a063a9b-81f0-0310-95a4-ce76da25c4cd
- Damnit I didn't press 'Save' before pushing
- |-
  Readable JS code for bookmarklets, hell yeah.

  Fixes #1710.
- |-
  Add TT hints to specific Box Drawing Characters
  If a BDC combines a heavy and a light stroke in the horizontal direction, the heavy stroke was not always properly hinted and therefore led to visual connection errors.
- |-
  Add TT hints to specific Box Drawing Characters
  If a BDC combines a heavy and a light stroke in the horizontal direction, the heavy stroke was not always properly hinted and therefore led to visual connection errors.
- work on numerals, started fixing stroke endings and edited some currency symbols
- Working with ugly code, tested on CPU but pretty slow.
- |-
  Cloud lxc (#3611)

  * Native YAML - cloud/lxc

  * debug var uses naked vars
- |-
  ui-macos/bits/runpython.do: report which platforms we're compiling for.

  Just as a quick reminder, in case you're building a fat binary and you don't
  have all the architectures actually installed.
- |-
  hostwatch.py: avoid using /dev/null on the server.

  According to at least one report, there are some slightly insane servers out
  there that have /dev/null set to non-user-writable.  This is totally broken,
  but we want sshuttle to work with as many servers as possible, so let's fake
  it up a bit instead.

  We don't try to avoid /dev/null on the client; sshuttle needs root access
  anyway, and if you're root, you can just fix your stupid /dev/null
  permissions.
- |-
  firewall.py: iptables: failure to delete a rule isn't always fatal.

  If the previous run of sshuttle didn't manage to clean up after itself, it
  might have left the sshuttle-12300 chain intact, but the OUTPUT chain might
  not refer to it anymore.  That would cause the *next* run of sshuttle to
  barf when trying to delete the OUTPUT entry, and then never get to the part
  where it just tries to delete the old chain so it can continue.

  Now only the last delete command (the one that actually deletes the chain)
  is fatal if it fails; the others just print a scary message, but that should
  only happen once in your life if you're unlucky.
- |-
  dns on MacOS: use divert sockets instead of 'fwd' rules.

  It turns out diverting UDP sockets is pretty easy compared to TCP (which
  makes it all the more embarrassing that they screwed up 'fwd' support for
  UDP and not TCP, but oh well).  So let's use divert sockets instead of
  transproxy for our DNS packets.

  This is a little tricky because we have to do it all in firewall.py, since
  divert sockets require root access, and only firewall.py has root access.
- |-
  dns: add support for MacOS (but it doesn't work...)

  ...because stupid MacOS ipfw 'fwd' rules don't work quite right with udp.
  It can intercept packets bound for remote hosts, but it doesn't correctly
  rewrite the port number from its original to the new socket, so it gets
  dropped by the local kernel anyway.

  That is, a packet to 1.2.3.4:53 should be redirected to, say,
  127.0.0.1:9999, the local DNS listener socket.  But instead, it gets sent to
  127.0.0.1:53, which nobody is listening on, so it gets eaten.

  Sigh.
- |-
  Merge pull request #2167 from arogl/patch-1

  Spelling update toke -> token
- |-
  save: catch and log SSH errors

  Currently, if the ssh connection to the remote server fails, we get the
  server errors, then an ugly traceback that ends up saying "look at the
  errors above". It makes it look like the traceback is part of the errors
  that we need to look at, when in reality it's just an exception that's
  not handled correctly by bup-save.

  Signed-off-by: Gabriel Filion <gabster@lelutin.ca>
  [rlb@defaultvalue.org: adjust commit summary]
  Reviewed-by: Rob Browning <rlb@defaultvalue.org>
  Tested-by: Rob Browning <rlb@defaultvalue.org>
- Move elements around for an initial new structure, and trimmed off some extra fat
- added break in vertical stroke of U+007C in bold italic set (@burodepeper)
- U+2192 adjusted vertical position of glyph + height & length of the horizontal stroke
  to align / height match to U+2500
- U+2190 adjusted vertical position of glyph + height & length of the horizontal stroke
  to align / height match to U+2500
- U+2578 horizontal alignment of superior margin of the stroke (1 unit adjustment)
- 'Tweaked slicing indices to use single : instead of ::, which I find more readable.  Tweaked
  Feature: Sex headers.'
- |-
  Pin stupid version-related bug entry to the line it's about.

  Plus upgrade our Releases version dependency to support.
- |-
  Remove __pycache__ and add __pycache__ to .gitignore

  __pycache__ is python3 bitcode which shouldn't be included.

  Signed-off-by: Wang <wangwangwar@gmail.com>
- "api: guard against junky public keys (#4435)\n\nIf non-ascii characters are sent
  along,\r\nProjectKey.objects.get_from_cache will be sad."
- "utils: Don't blow up trimming a value that isn't ascii or unicode (#4433)\n\nInput
  into trim may either be bytes or text, and we already expect this\r\nsince we check
  for `six.string_types`. But if we get a binary type that\r\nisn't ascii, trim would
  blow up."
- "utils: Don't blow up trimming a value that isn't ascii or unicode (#4433)\n\nInput
  into trim may either be bytes or text, and we already expect this\r\nsince we check
  for `six.string_types`. But if we get a binary type that\r\nisn't ascii, trim would
  blow up."
- |-
  Merge pull request #370 from navyad/navyad/profile

  profile and simple_profile takes optional parameter sex
- profile and simple_profile takes optional parameter sex
- |-
  Add clipboard example

  ...and fix ugly import in docs
- |-
  Updated readme file

  Added a really cool library that helped me out a lot today. Unlike standard swagger libraries which pollute the code with ugly annotations, this one allows the user to only modify the routes file in order to generate the docs. It's also very easy to redirect an endpoint directly to Swagger UI so that the generated JSON/YAML file is shown in the Swagger interface.
- Stupid bugfix roundup, thank you tests...
- |-
  Add alias “\” for “DuckDuckGo” search

  This alias lets us write search queries using fewer keystrokes. It is
  especially useful in conjunction with the bang syntax. For example: To
  search “AllMusic” for the artist “La Dispute” you can use the following
  search query: `\!amg La Dispute`.
- |-
  git: fix `fatal: bad flag '...' after filename`

  For example:

      $ git log README.md -p
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log -p README.md --name-only
      fatal: bad flag '--name-only' used after filename
      $ fuck
      git log -p --name-only README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log README.md -p CONTRIBUTING.md
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md CONTRIBUTING.md [enter/↑/↓/ctrl+c]
- |-
  git: fix `fatal: bad flag '...' after filename`

  For example:

      $ git log README.md -p
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log -p README.md --name-only
      fatal: bad flag '--name-only' used after filename
      $ fuck
      git log -p --name-only README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log README.md -p CONTRIBUTING.md
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md CONTRIBUTING.md [enter/↑/↓/ctrl+c]
- |-
  git: fix `fatal: bad flag '...' after filename`

  For example:

      $ git log README.md -p
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log -p README.md --name-only
      fatal: bad flag '--name-only' used after filename
      $ fuck
      git log -p --name-only README.md [enter/↑/↓/ctrl+c]
      Aborted

      $ git log README.md -p CONTRIBUTING.md
      fatal: bad flag '-p' used after filename
      $ fuck
      git log -p README.md CONTRIBUTING.md [enter/↑/↓/ctrl+c]
- |-
  Merge pull request #462 from scorphus/fish-alias

  #N/A Remove fucked up cmd from history regardless of status
- |-
  #N/A Remove fucked up cmd from history regardless of status

  Most fucked up commands are erroneous, but that's not always the case.
- |-
  #N/A Remove fucked up cmd from history regardless of status

  Most fucked up commands are erroneous, but that's not always the case.
- |-
  [FIX] account: use code from defaults dict if present

  Do not force a ugly '... (copy)' code if provides one.
  Closes #11260
- |-
  [FIX] website_sale: sort by literal not detected for translation

  There are literals inside a t tag that should be translated but they are never
  exported to the pot file because they are inside a t-value attribute as python
  code.

  Closes #14344
- "[FIX] report: correct pot file"
- Clarify our stand point on running multiple processes and fat containers
- |-
  Don't error on unicode in the votestream.

  Change the error from a 500 to a line in the error log with more info about what/why it failed.
  This seems to be the result of someone's crappy votebot.
- Import from napalm_base instead of napalm
- Check if running behind a commie firewall.
- Check if running behind a commie firewall.
- Warn the user if commie SSL certificates exist on the system
- "[MRG + 1] ENH Do not materialise CV splits when unnecessary (#7941)\n\n* ENH Parallelize
  by candidates first then by splits.\r\n\r\n* ENH do not materialize a cv iterator
  to avoid memory blow ups."
- "[MRG + 1] [TST] (half-cosmetic) use less nose.tools import to simplify future transition
  to py.test (#7384)\n\n* use less nose.tools import to simplify future transition
  to activly developing test suites/runners\r\n\r\n* assert_equal -> assert_array_equal
  in test_feature_hasher_pairs_with_string_values\r\n\r\nand one missed ImportError
  that should be replaced with AttributeError\r\n\r\n* test for py2.6 compat with
  except AttributeError\r\n\r\n* fix importing of SkipTest\r\n\r\n* force using nose
  in python2.6 for now\r\n\r\n* there was no assert_dict_equal in py2.6. but we can
  use assert_equal\r\n\r\nalthough failed test will look a little bit ugly\r\n\r\n*
  remove nose imports from doc/datasets"
- Fix CONNECT request timeout (with an ugly hack)
- |-
  change auth to interna_hashed

  because why the fuck not?
- New data from KADHosts, someonewhocares.org, and porn and gambling extensions.
- New data from yoyo.org, someonewhocares.org, mvps.org, and for porn extension data.
- |-
  Make NLP example able to use cyrillic script in UTF8

  The issue is:
  When you try to train LSTM cityname generator on dataset with, for
  example, Russian cities, this example starts work unproperly when RNN
  result sequence is not a Russian symbols, but some ugly stuff, looks
  like codepage fault.

  I've found, that problem is in TFlearn function
  "string_to_semi_redundant_sequences", in expressions "chars =
  set(string)" and "enumerate(chars)" - when you feed it with cyrillic
  utf-8 string function treats this string's symbols in ASCII, so we
  receive such dictionary char_idx:
  { '\x80': 1, '\x81': 2 ..... } etc.

  As I've understood, Russian symbols in UTF-8 take more than one byte, so
  it doesn't fit in "one-symbol key" of char_idx dictionary, and
  information about them is lost.

  The solution is - before we process training dataset with
  "string_to_semi_redundant_sequences" the program should treat this
  string as sequence of utf-8 characters like "\u044b\u043e\u0426", so
  this way we receive correct dictionary, that we can use to compare
  Russian symbols with their digital code representation in dictionary.
  This way the dictionary have such kind of view:
  { u'7': 56, u'8': 68, u'9': 67, u'\u0410': 6, u'\u0411': 5, u'\u0412':
  8, u'\u0413': 7, ... }

  This solution potentially gives a chance to use in TFLearn any other
  national language characters, that used UTF-8, not only Russian, but
  maybe Ukrainian, Serbian, Malaysian, Hindi or what else.
- added documentation for solve. I had to add it to doc/.../slinalg.txt as well otherwise
  the method signature looked ugly in sphinx
- |-
  Auto merge of #2029 - micbou:timeout-exception, r=Valloric

  [READY] Catch ReadTimeout exception on requests

  In PR #2016, we have changed the way we are catching exceptions on requests by only catching the `ServerError` instead of all exceptions, which is great for debugging purposes. However, due to this change, we don't catch the exception from a timed out request, leading to a ugly traceback in Vim. This PR fixes that.

  <!-- Reviewable:start -->
  [<img src="https://reviewable.io/review_button.svg" height="40" alt="Review on Reviewable"/>](https://reviewable.io/reviews/valloric/youcompleteme/2029)
  <!-- Reviewable:end -->
- |-
  Fix escaping issues in the docs

  Pandoc treats both underscores and dollar signs as non-literal
  characters which screwed up the manpage.
- add only hosts support for gae proxy
- fix deploy gae server, dns resolve remote
- change to gae mode for deploy, some ip not support appengine.google.com
- |-
  Fat Zebra: De-nest soft descriptor fields

  Contrary to their documentation, Fat Zebra has stated that the
  descriptor fields should not be nested in their own hash.

  Closes #2263
- |-
  Fat Zebra: De-nest soft descriptor fields

  Contrary to their documentation, Fat Zebra has stated that the
  descriptor fields should not be nested in their own hash.

  Closes #2263
- |-
  Fat Zebra: Add scrubbing to Fat Zebra gateway

  Closes #2037
- |-
  Fat Zebra: Add scrubbing to Fat Zebra gateway

  Closes #2037
- |-
  Fat Zebra: Pass 3DS information fields

  This is not 3DS support, it only passes these fields along properly
  if supplied.  All three fields need to be present to succeed.

  Closes #2236
- 'Fat Zebra: Fix failing remote test for refund when no id is given'
- |-
  Fat Zebra: Fix extra descriptor fields

  Closes #2221
- |-
  [Fix #3430] Prevent exception in `Performance/RedundantMerge` when receiver is implicit

  This cop would blow up when inspecting code that involved sending
  `#merge!` to `self` implicitly, e.g.:

  ```
  class Foo
    def bar(baz)
      merge!(baz)
    end
  end
  ```

  This change fixes that.
- "Various linting and test style (#515)\n\n* Lint: Improve Metrics/LineLength from
  140 to 130\r\n* Lint: Fix Style/LineEndConcatenation\r\n* Lint: Fix Style/SingleLineMethods\r\n*
  Lint: Fix Style/TrailingCommaInLiteral\r\n* Lint: Fix Style/UnneededPercentQ\r\n*
  Lint: Style/ZeroLengthPredicate\r\n* Test: Prefer refute to assert bang"
- |-
  Tests: Stylistic changes to the UserSession.create tests

  - Prefer refute to bang
  - Extract local variables to clarify assertion
  - Prefer one assertion per test where possible
- Replaced ugly to_a.drop(1) with MatchData#captures
- |-
  new credentials uploading feature

  rm req json, not saving file, styled button a bit

  skinny controller fat model

  minor spacing mistake

  build user credentials fixed mass assignment issue

  undo mass assignment variables

  spec in progress

  spec

  fixed exception issue

  json fixtures

  slight change to test

  added test to assert credentials created for current user only

  added tests to satisfy requirements

  refined import method

  added status 422

  saving two lines of code

  one more test

  fixed small bug, words changed

  minor change in test

  styled file upload button

  deleted unnecessary spec

  switched to modal format

  made modal more presentable

  minor change to modal

  fix indentation issue

  ok nested correctly within form tag
- |-
  don't blow up when given an IPv6 address with a zone index

  Fixes #144, closes #146
- rubygems development dependencies are shit
- kill this shit
- |-
  Ensure Access Controls on link resource

  When a link resource needs to change its destination, there was a bug in
  the logic flow that would cause the access controls on the resulting
  symlink to revert to the default access controls. This commit closes
  that hole by re-evaluating the current access controls after creating
  the new symlink.

  Signed-off-by: Tom Duffield <tom@chef.io>
- |-
  Clean up upstart export to use native upstart features

  The old upstart used a big ugly line with `su` `export` `sh` and other evilness. Aside from this, it was also a significant security vulnerability as anyone with access to the box could run `ps` and see all the variables, including things like database credentials.
  This change makes the upstart config use the native features of upstart itself.
- |-
  Add frame-src but don't spam the log with DEPRECATION warnings.

  This is an ugly hack, and it should be reverted once we stop supporting
  old browsers.
- Cut the bullshit
- |-
  fix tagging edge cases

  add comment and use Arrays.asList()

  brain fart between camelCase and snake_case
- |-
  Refs #1011 problems index layout fix

  Long names in the problems index can blow up the table layout, causing
  ugliness and potentially horizontal scrolling. This change adds
  whitespace: nowrap and sets a few td widths to keep the layout from
  jumping around.
- "The grand language renaming bonanza (#3278)\n\n* Removing FORTRAN samples because
  OS X case-insensitive filesystems :-\\\r\n\r\n* Adding Fotran samples back\r\n\r\n*
  FORTRAN -> Fortran\r\n\r\n* Groff -> Roff\r\n\r\n* GAS -> Unix Assembly\r\n\r\n*
  Cucumber -> Gherkin\r\n\r\n* Nimrod -> Nim\r\n\r\n* Ragel in Ruby Host -> Ragel\r\n\r\n*
  Jade -> Pug\r\n\r\n* VimL -> Vim script"
- avoid the use of tempfile as long paths can make crontab barf
- |-
  Merge pull request #76 from onehub/no-reference-parsing

  Make sure "No styleguide reference" doesn't blow up.
- |-
  Add tests and a modification to the regex to ensure that documenting
  "No styleguide reference" doesn't blow up.
- |-
  text edit, plus spec/SPEC wtf???

  I tweaked some verbiage and got some weird filename shit
- "Fixes & updates: \n * Fix config problem for default overlay_color\n * Animate
  stroke width always 1 (2 too thick for small image)\n * Animate pointsize is half
  of configured size (24 was half of default)\n * Interline spacing is negative, one-fifth
  of the configured size"
- |-
  Use _pry_.pager if possible

  The prior code was always using Pry.new.pager -- this was weird for a few reasons:
  1) _pry_ is always available (afaict) so why not just call _pry_.pager rather than creating a throway pry object for this?
  2) When creating a new Pry instance (via Pry.new) the when_started hook is run...this resulted in some errors and strange behaviour since a naked instance created with Pry.new is not properly configured (it misses a 'target' (binding)

  I left the old code in there though to trigger when _pry_ is not available since I assume it's there for good reason?!
- |-
  (PUP-6474) Exclude problematic files from gettext parsing

  This commit brings in a new version of the gettext setup gem that allows
  the user to specify a list of files to be skipped when searching for
  translatable strings. This was necessary because some files in the
  puppet type system use underscores in a way that triggers the gettext
  parser incorrectly. So we need to ignore these files when extracting
  string into the POT file.
- |-
  Fix constantize edge case involving prepend, autoloading and name conflicts

  In the following situation:

  ```ruby
  class Bar
  end

  module Baz
  end

  class Foo
    prepend Baz
  end

  class Foo::Bar
  end
  ```

  Running `Inflector.constantize('Foo::Bar')` would blow up with a NameError.

  What is happening is that `constatize` was written before the introduction
  of prepend, and wrongly assume that `klass.ancestors.first == klass`.

  So it uses `klass.ancestors.inject` without arguments, as a result
  a prepended module is used in place of the actual class.
- Fuck you Ruby 1.8
- Dammit eventmachine
- Basic but ugly acceptance specs with selenium
- |-
  Version 0.5.2

   * Avoid '#' in location (thanks @schmidt).
   * Add rdoc and rake as development dependencies (thanks @schmidt).
   * Update to Fractal to go through API, presents ugly XML now instead of nothing.
   * Bump Skinny to work with latest WebSocket draft.
- "Adding preventDefault for some onclick handlers \n\nthis should avoid ugly '#'
  in the location bar"
- Improve easymotion highlighting to be yellow not an ugly red block
- |-
  Merge pull request #424 from maletor/neocomplete

  Initial crack at neocomplete
- Initial crack at neocomplete
- |-
  Update Vundle directory

  Vundle gets installed to ~/.vim/bundle/vundle/, not ~/.vim/bundle/vundle.vim/, which the current .vimrc specifies. This makes vim barf when opening.
- |-
  Adds syntastic

  https://github.com/scrooloose/syntastic

  Syntastic will perform syntax checks upon file save. This should prevent spec
  runs that blow up on syntax errors.
- Fix default background color in Placeholder being ugly black
- Write a test that doesn't suck
- |-
  Guidelines for formatting Haskell pragmas

  * With too many on one line, it gets ugly and you'll be forced to wrap.
  * You can be consistent if there's only one per line.
  * Use a blank line between pragma and module.
- |-
  Add Angular Best Practices

  A first crack at some Angular best practices arrived at through a seven
  month angular project and discussions with other teams doing angular
  work around the company. I'm no angular expert, but these are practices
  I can remember working well, particularly in the face of other options
  that *did not* work equally well.
- Add a specification for bang methods
- |-
  De-duplicates cocaine command line path per run

  Adds failing spec to command line dup check

  [fixes #1670]
  [fixes #2169]
- |-
  Use a Glue test that doesn't destroy others

  For some reason the test in this PR would make all other ones blow up.
  For reasons not fully understood at the time of writing, the alternate
  spec I'd written doesn't. So, we'll replace that test with this one and
  it'll be green.
- copy over dummy into another directory, and then blow it away on the tear down,
  to avoid dirtying the git index.
